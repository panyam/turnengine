// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file weewar/v1/games.proto (package weewar.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { AttackUnitAction, Game, GameMove, GameMoveGroup, GameMoveHistory, GameMoveResult, GameState, MoveUnitAction, Pagination, PaginationResponse, WorldChange } from "./models_pb";
import { file_weewar_v1_models } from "./models_pb";
import { file_google_api_annotations } from "../../google/api/annotations_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../protoc-gen-openapiv2/options/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file weewar/v1/games.proto.
 */
export const file_weewar_v1_games: GenFile = /*@__PURE__*/
  fileDesc("ChV3ZWV3YXIvdjEvZ2FtZXMucHJvdG8SCXdlZXdhci52MSKRAQoIR2FtZUluZm8SCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIQCghjYXRlZ29yeRgEIAEoCRISCgpkaWZmaWN1bHR5GAUgASgJEgwKBHRhZ3MYBiADKAkSDAoEaWNvbhgHIAEoCRIUCgxsYXN0X3VwZGF0ZWQYCCABKAkiTwoQTGlzdEdhbWVzUmVxdWVzdBIpCgpwYWdpbmF0aW9uGAEgASgLMhUud2Vld2FyLnYxLlBhZ2luYXRpb24SEAoIb3duZXJfaWQYAiABKAkiZgoRTGlzdEdhbWVzUmVzcG9uc2USHgoFaXRlbXMYASADKAsyDy53ZWV3YXIudjEuR2FtZRIxCgpwYWdpbmF0aW9uGAIgASgLMh0ud2Vld2FyLnYxLlBhZ2luYXRpb25SZXNwb25zZSItCg5HZXRHYW1lUmVxdWVzdBIKCgJpZBgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJIoIBCg9HZXRHYW1lUmVzcG9uc2USHQoEZ2FtZRgBIAEoCzIPLndlZXdhci52MS5HYW1lEiMKBXN0YXRlGAIgASgLMhQud2Vld2FyLnYxLkdhbWVTdGF0ZRIrCgdoaXN0b3J5GAMgASgLMhoud2Vld2FyLnYxLkdhbWVNb3ZlSGlzdG9yeSI0ChVHZXRHYW1lQ29udGVudFJlcXVlc3QSCgoCaWQYASABKAkSDwoHdmVyc2lvbhgCIAEoCSJgChZHZXRHYW1lQ29udGVudFJlc3BvbnNlEhYKDndlZXdhcl9jb250ZW50GAEgASgJEhYKDnJlY2lwZV9jb250ZW50GAIgASgJEhYKDnJlYWRtZV9jb250ZW50GAMgASgJIuwBChFVcGRhdGVHYW1lUmVxdWVzdBIPCgdnYW1lX2lkGAEgASgJEiEKCG5ld19nYW1lGAIgASgLMg8ud2Vld2FyLnYxLkdhbWUSJwoJbmV3X3N0YXRlGAMgASgLMhQud2Vld2FyLnYxLkdhbWVTdGF0ZRIvCgtuZXdfaGlzdG9yeRgEIAEoCzIaLndlZXdhci52MS5HYW1lTW92ZUhpc3RvcnkSLwoLdXBkYXRlX21hc2sYBSABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrOhiSQRUKEyoRVXBkYXRlR2FtZVJlcXVlc3QiTgoSVXBkYXRlR2FtZVJlc3BvbnNlEh0KBGdhbWUYASABKAsyDy53ZWV3YXIudjEuR2FtZToZkkEWChQqElVwZGF0ZUdhbWVSZXNwb25zZSIfChFEZWxldGVHYW1lUmVxdWVzdBIKCgJpZBgBIAEoCSIUChJEZWxldGVHYW1lUmVzcG9uc2UiHgoPR2V0R2FtZXNSZXF1ZXN0EgsKA2lkcxgBIAMoCSKIAQoQR2V0R2FtZXNSZXNwb25zZRI1CgVnYW1lcxgBIAMoCzImLndlZXdhci52MS5HZXRHYW1lc1Jlc3BvbnNlLkdhbWVzRW50cnkaPQoKR2FtZXNFbnRyeRILCgNrZXkYASABKAkSHgoFdmFsdWUYAiABKAsyDy53ZWV3YXIudjEuR2FtZToCOAEiMgoRQ3JlYXRlR2FtZVJlcXVlc3QSHQoEZ2FtZRgBIAEoCzIPLndlZXdhci52MS5HYW1lItcBChJDcmVhdGVHYW1lUmVzcG9uc2USHQoEZ2FtZRgBIAEoCzIPLndlZXdhci52MS5HYW1lEigKCmdhbWVfc3RhdGUYAiABKAsyFC53ZWV3YXIudjEuR2FtZVN0YXRlEkQKDGZpZWxkX2Vycm9ycxgDIAMoCzIuLndlZXdhci52MS5DcmVhdGVHYW1lUmVzcG9uc2UuRmllbGRFcnJvcnNFbnRyeRoyChBGaWVsZEVycm9yc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiSgoTUHJvY2Vzc01vdmVzUmVxdWVzdBIPCgdnYW1lX2lkGAEgASgJEiIKBW1vdmVzGAMgAygLMhMud2Vld2FyLnYxLkdhbWVNb3ZlInAKFFByb2Nlc3NNb3Zlc1Jlc3BvbnNlEi8KDG1vdmVfcmVzdWx0cxgBIAMoCzIZLndlZXdhci52MS5HYW1lTW92ZVJlc3VsdBInCgdjaGFuZ2VzGAIgAygLMhYud2Vld2FyLnYxLldvcmxkQ2hhbmdlIiYKE0dldEdhbWVTdGF0ZVJlcXVlc3QSDwoHZ2FtZV9pZBgBIAEoCSI7ChRHZXRHYW1lU3RhdGVSZXNwb25zZRIjCgVzdGF0ZRgBIAEoCzIULndlZXdhci52MS5HYW1lU3RhdGUiQwoQTGlzdE1vdmVzUmVxdWVzdBIPCgdnYW1lX2lkGAEgASgJEg4KBm9mZnNldBgCIAEoBRIOCgZsYXN0X24YAyABKAUiVAoRTGlzdE1vdmVzUmVzcG9uc2USEAoIaGFzX21vcmUYASABKAgSLQoLbW92ZV9ncm91cHMYAiADKAsyGC53ZWV3YXIudjEuR2FtZU1vdmVHcm91cCI8ChNHZXRPcHRpb25zQXRSZXF1ZXN0Eg8KB2dhbWVfaWQYASABKAkSCQoBcRgCIAEoBRIJCgFyGAMgASgFInAKFEdldE9wdGlvbnNBdFJlc3BvbnNlEiYKB29wdGlvbnMYASADKAsyFS53ZWV3YXIudjEuR2FtZU9wdGlvbhIWCg5jdXJyZW50X3BsYXllchgCIAEoBRIYChBnYW1lX2luaXRpYWxpemVkGAMgASgIIv0BCgpHYW1lT3B0aW9uEiUKBG1vdmUYASABKAsyFS53ZWV3YXIudjEuTW92ZU9wdGlvbkgAEikKBmF0dGFjaxgCIAEoCzIXLndlZXdhci52MS5BdHRhY2tPcHRpb25IABIsCghlbmRfdHVybhgDIAEoCzIYLndlZXdhci52MS5FbmRUdXJuT3B0aW9uSAASKwoFYnVpbGQYBCABKAsyGi53ZWV3YXIudjEuQnVpbGRVbml0T3B0aW9uSAASMwoHY2FwdHVyZRgFIAEoCzIgLndlZXdhci52MS5DYXB0dXJlQnVpbGRpbmdPcHRpb25IAEINCgtvcHRpb25fdHlwZSIPCg1FbmRUdXJuT3B0aW9uImQKCk1vdmVPcHRpb24SCQoBcRgBIAEoBRIJCgFyGAIgASgFEhUKDW1vdmVtZW50X2Nvc3QYAyABKAUSKQoGYWN0aW9uGAQgASgLMhkud2Vld2FyLnYxLk1vdmVVbml0QWN0aW9uIrQBCgxBdHRhY2tPcHRpb24SCQoBcRgBIAEoBRIJCgFyGAIgASgFEhgKEHRhcmdldF91bml0X3R5cGUYAyABKAUSGgoSdGFyZ2V0X3VuaXRfaGVhbHRoGAQgASgFEhIKCmNhbl9hdHRhY2sYBSABKAgSFwoPZGFtYWdlX2VzdGltYXRlGAYgASgFEisKBmFjdGlvbhgHIAEoCzIbLndlZXdhci52MS5BdHRhY2tVbml0QWN0aW9uIk4KD0J1aWxkVW5pdE9wdGlvbhIJCgFxGAEgASgFEgkKAXIYAiABKAUSEQoJdGlsZV90eXBlGAMgASgFEhIKCmJ1aWxkX2Nvc3QYBCABKAUiQAoVQ2FwdHVyZUJ1aWxkaW5nT3B0aW9uEgkKAXEYASABKAUSCQoBchgCIAEoBRIRCgl0aWxlX3R5cGUYAyABKAUyqwgKDEdhbWVzU2VydmljZRJfCgpDcmVhdGVHYW1lEhwud2Vld2FyLnYxLkNyZWF0ZUdhbWVSZXF1ZXN0Gh0ud2Vld2FyLnYxLkNyZWF0ZUdhbWVSZXNwb25zZSIUgtPkkwIOOgEqIgkvdjEvZ2FtZXMSXwoIR2V0R2FtZXMSGi53ZWV3YXIudjEuR2V0R2FtZXNSZXF1ZXN0Ghsud2Vld2FyLnYxLkdldEdhbWVzUmVzcG9uc2UiGoLT5JMCFBISL3YxL2dhbWVzOmJhdGNoR2V0ElkKCUxpc3RHYW1lcxIbLndlZXdhci52MS5MaXN0R2FtZXNSZXF1ZXN0Ghwud2Vld2FyLnYxLkxpc3RHYW1lc1Jlc3BvbnNlIhGC0+STAgsSCS92MS9nYW1lcxJYCgdHZXRHYW1lEhkud2Vld2FyLnYxLkdldEdhbWVSZXF1ZXN0Ghoud2Vld2FyLnYxLkdldEdhbWVSZXNwb25zZSIWgtPkkwIQEg4vdjEvZ2FtZXMve2lkfRJjCgpEZWxldGVHYW1lEhwud2Vld2FyLnYxLkRlbGV0ZUdhbWVSZXF1ZXN0Gh0ud2Vld2FyLnYxLkRlbGV0ZUdhbWVSZXNwb25zZSIYgtPkkwISKhAvdjEvZ2FtZXMve2lkPSp9EmsKClVwZGF0ZUdhbWUSHC53ZWV3YXIudjEuVXBkYXRlR2FtZVJlcXVlc3QaHS53ZWV3YXIudjEuVXBkYXRlR2FtZVJlc3BvbnNlIiCC0+STAho6ASoyFS92MS9nYW1lcy97Z2FtZV9pZD0qfRJyCgxHZXRHYW1lU3RhdGUSHi53ZWV3YXIudjEuR2V0R2FtZVN0YXRlUmVxdWVzdBofLndlZXdhci52MS5HZXRHYW1lU3RhdGVSZXNwb25zZSIhgtPkkwIbEhkvdjEvZ2FtZXMve2dhbWVfaWR9L3N0YXRlEmkKCUxpc3RNb3ZlcxIbLndlZXdhci52MS5MaXN0TW92ZXNSZXF1ZXN0Ghwud2Vld2FyLnYxLkxpc3RNb3Zlc1Jlc3BvbnNlIiGC0+STAhsSGS92MS9nYW1lcy97Z2FtZV9pZH0vbW92ZXMSdQoMUHJvY2Vzc01vdmVzEh4ud2Vld2FyLnYxLlByb2Nlc3NNb3Zlc1JlcXVlc3QaHy53ZWV3YXIudjEuUHJvY2Vzc01vdmVzUmVzcG9uc2UiJILT5JMCHjoBKiIZL3YxL2dhbWVzL3tnYW1lX2lkfS9tb3ZlcxJ8CgxHZXRPcHRpb25zQXQSHi53ZWV3YXIudjEuR2V0T3B0aW9uc0F0UmVxdWVzdBofLndlZXdhci52MS5HZXRPcHRpb25zQXRSZXNwb25zZSIrgtPkkwIlEiMvdjEvZ2FtZXMve2dhbWVfaWR9L29wdGlvbnMve3F9L3tyfUKcAQoNY29tLndlZXdhci52MUIKR2FtZXNQcm90b1ABWjpnaXRodWIuY29tL3BhbnlhbS90dXJuZW5naW5lL2dhbWVzL3dlZXdhci9nZW4vZ28vd2Vld2FyL3YxogIDV1hYqgIJV2Vld2FyLlYxygIJV2Vld2FyXFYx4gIVV2Vld2FyXFYxXEdQQk1ldGFkYXRh6gIKV2Vld2FyOjpWMWIGcHJvdG8z", [file_google_protobuf_timestamp, file_google_protobuf_field_mask, file_weewar_v1_models, file_google_api_annotations, file_protoc_gen_openapiv2_options_annotations]);

/**
 * GameInfo represents a game in the catalog
 *
 * @generated from message weewar.v1.GameInfo
 */
export type GameInfo = Message<"weewar.v1.GameInfo"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * @generated from field: string difficulty = 5;
   */
  difficulty: string;

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * @generated from field: string icon = 7;
   */
  icon: string;

  /**
   * @generated from field: string last_updated = 8;
   */
  lastUpdated: string;
};

/**
 * Describes the message weewar.v1.GameInfo.
 * Use `create(GameInfoSchema)` to create a new message.
 */
export const GameInfoSchema: GenMessage<GameInfo> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 0);

/**
 * Request messages
 *
 * @generated from message weewar.v1.ListGamesRequest
 */
export type ListGamesRequest = Message<"weewar.v1.ListGamesRequest"> & {
  /**
   * Pagination info
   *
   * @generated from field: weewar.v1.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * May be filter by owner id
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;
};

/**
 * Describes the message weewar.v1.ListGamesRequest.
 * Use `create(ListGamesRequestSchema)` to create a new message.
 */
export const ListGamesRequestSchema: GenMessage<ListGamesRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 1);

/**
 * @generated from message weewar.v1.ListGamesResponse
 */
export type ListGamesResponse = Message<"weewar.v1.ListGamesResponse"> & {
  /**
   * @generated from field: repeated weewar.v1.Game items = 1;
   */
  items: Game[];

  /**
   * @generated from field: weewar.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message weewar.v1.ListGamesResponse.
 * Use `create(ListGamesResponseSchema)` to create a new message.
 */
export const ListGamesResponseSchema: GenMessage<ListGamesResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 2);

/**
 * @generated from message weewar.v1.GetGameRequest
 */
export type GetGameRequest = Message<"weewar.v1.GetGameRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional, defaults to default_version
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message weewar.v1.GetGameRequest.
 * Use `create(GetGameRequestSchema)` to create a new message.
 */
export const GetGameRequestSchema: GenMessage<GetGameRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 3);

/**
 * @generated from message weewar.v1.GetGameResponse
 */
export type GetGameResponse = Message<"weewar.v1.GetGameResponse"> & {
  /**
   * @generated from field: weewar.v1.Game game = 1;
   */
  game?: Game;

  /**
   * @generated from field: weewar.v1.GameState state = 2;
   */
  state?: GameState;

  /**
   * @generated from field: weewar.v1.GameMoveHistory history = 3;
   */
  history?: GameMoveHistory;
};

/**
 * Describes the message weewar.v1.GetGameResponse.
 * Use `create(GetGameResponseSchema)` to create a new message.
 */
export const GetGameResponseSchema: GenMessage<GetGameResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 4);

/**
 * @generated from message weewar.v1.GetGameContentRequest
 */
export type GetGameContentRequest = Message<"weewar.v1.GetGameContentRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional, defaults to default_version
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message weewar.v1.GetGameContentRequest.
 * Use `create(GetGameContentRequestSchema)` to create a new message.
 */
export const GetGameContentRequestSchema: GenMessage<GetGameContentRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 5);

/**
 * @generated from message weewar.v1.GetGameContentResponse
 */
export type GetGameContentResponse = Message<"weewar.v1.GetGameContentResponse"> & {
  /**
   * @generated from field: string weewar_content = 1;
   */
  weewarContent: string;

  /**
   * @generated from field: string recipe_content = 2;
   */
  recipeContent: string;

  /**
   * @generated from field: string readme_content = 3;
   */
  readmeContent: string;
};

/**
 * Describes the message weewar.v1.GetGameContentResponse.
 * Use `create(GetGameContentResponseSchema)` to create a new message.
 */
export const GetGameContentResponseSchema: GenMessage<GetGameContentResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 6);

/**
 * @generated from message weewar.v1.UpdateGameRequest
 */
export type UpdateGameRequest = Message<"weewar.v1.UpdateGameRequest"> & {
  /**
   * Game id to modify
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * *
   * Game being updated
   *
   * @generated from field: weewar.v1.Game new_game = 2;
   */
  newGame?: Game;

  /**
   * New world state to save
   *
   * @generated from field: weewar.v1.GameState new_state = 3;
   */
  newState?: GameState;

  /**
   * History to save
   *
   * @generated from field: weewar.v1.GameMoveHistory new_history = 4;
   */
  newHistory?: GameMoveHistory;

  /**
   * *
   * Mask of fields being updated in this Game to make partial changes.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 5;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message weewar.v1.UpdateGameRequest.
 * Use `create(UpdateGameRequestSchema)` to create a new message.
 */
export const UpdateGameRequestSchema: GenMessage<UpdateGameRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 7);

/**
 * *
 * The request for (partially) updating an Game.
 *
 * @generated from message weewar.v1.UpdateGameResponse
 */
export type UpdateGameResponse = Message<"weewar.v1.UpdateGameResponse"> & {
  /**
   * *
   * Game being updated
   *
   * @generated from field: weewar.v1.Game game = 1;
   */
  game?: Game;
};

/**
 * Describes the message weewar.v1.UpdateGameResponse.
 * Use `create(UpdateGameResponseSchema)` to create a new message.
 */
export const UpdateGameResponseSchema: GenMessage<UpdateGameResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 8);

/**
 * *
 * Request to delete an game.
 *
 * @generated from message weewar.v1.DeleteGameRequest
 */
export type DeleteGameRequest = Message<"weewar.v1.DeleteGameRequest"> & {
  /**
   * *
   * ID of the game to be deleted.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message weewar.v1.DeleteGameRequest.
 * Use `create(DeleteGameRequestSchema)` to create a new message.
 */
export const DeleteGameRequestSchema: GenMessage<DeleteGameRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 9);

/**
 * *
 * Game deletion response
 *
 * @generated from message weewar.v1.DeleteGameResponse
 */
export type DeleteGameResponse = Message<"weewar.v1.DeleteGameResponse"> & {
};

/**
 * Describes the message weewar.v1.DeleteGameResponse.
 * Use `create(DeleteGameResponseSchema)` to create a new message.
 */
export const DeleteGameResponseSchema: GenMessage<DeleteGameResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 10);

/**
 * *
 * Request to batch get games
 *
 * @generated from message weewar.v1.GetGamesRequest
 */
export type GetGamesRequest = Message<"weewar.v1.GetGamesRequest"> & {
  /**
   * *
   * IDs of the game to be fetched
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message weewar.v1.GetGamesRequest.
 * Use `create(GetGamesRequestSchema)` to create a new message.
 */
export const GetGamesRequestSchema: GenMessage<GetGamesRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 11);

/**
 * *
 * Game batch-get response
 *
 * @generated from message weewar.v1.GetGamesResponse
 */
export type GetGamesResponse = Message<"weewar.v1.GetGamesResponse"> & {
  /**
   * @generated from field: map<string, weewar.v1.Game> games = 1;
   */
  games: { [key: string]: Game };
};

/**
 * Describes the message weewar.v1.GetGamesResponse.
 * Use `create(GetGamesResponseSchema)` to create a new message.
 */
export const GetGamesResponseSchema: GenMessage<GetGamesResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 12);

/**
 * *
 * Game creation request object
 *
 * @generated from message weewar.v1.CreateGameRequest
 */
export type CreateGameRequest = Message<"weewar.v1.CreateGameRequest"> & {
  /**
   * *
   * Game being updated
   *
   * @generated from field: weewar.v1.Game game = 1;
   */
  game?: Game;
};

/**
 * Describes the message weewar.v1.CreateGameRequest.
 * Use `create(CreateGameRequestSchema)` to create a new message.
 */
export const CreateGameRequestSchema: GenMessage<CreateGameRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 13);

/**
 * *
 * Response of an game creation.
 *
 * @generated from message weewar.v1.CreateGameResponse
 */
export type CreateGameResponse = Message<"weewar.v1.CreateGameResponse"> & {
  /**
   * *
   * Game being created
   *
   * @generated from field: weewar.v1.Game game = 1;
   */
  game?: Game;

  /**
   * The starting game state
   *
   * @generated from field: weewar.v1.GameState game_state = 2;
   */
  gameState?: GameState;

  /**
   * *
   * Error specific to a field if there are any errors.
   *
   * @generated from field: map<string, string> field_errors = 3;
   */
  fieldErrors: { [key: string]: string };
};

/**
 * Describes the message weewar.v1.CreateGameResponse.
 * Use `create(CreateGameResponseSchema)` to create a new message.
 */
export const CreateGameResponseSchema: GenMessage<CreateGameResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 14);

/**
 * *
 * Request to add moves to a game
 * The model is that a game in each "tick" can handle multiple moves (by possibly various players).
 * It is upto the move manager/processor in the game to ensure the "transaction" of moves is handled
 * atomically.
 *
 * For example we may have 3 moves where first two units are moved to a common location
 * and then they attack another unit.  Here If we treat it as a single unit attacking it
 * will have different outcomes than a "combined" attack.
 *
 * @generated from message weewar.v1.ProcessMovesRequest
 */
export type ProcessMovesRequest = Message<"weewar.v1.ProcessMovesRequest"> & {
  /**
   * *
   * Game ID to add moves to
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * *
   * List of moves to add
   *
   * @generated from field: repeated weewar.v1.GameMove moves = 3;
   */
  moves: GameMove[];
};

/**
 * Describes the message weewar.v1.ProcessMovesRequest.
 * Use `create(ProcessMovesRequestSchema)` to create a new message.
 */
export const ProcessMovesRequestSchema: GenMessage<ProcessMovesRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 15);

/**
 * *
 * Response after adding moves to game.
 *
 * Returns the response of the moves along with all the changes incurred as a result
 *
 * @generated from message weewar.v1.ProcessMovesResponse
 */
export type ProcessMovesResponse = Message<"weewar.v1.ProcessMovesResponse"> & {
  /**
   * *
   * Each game move result stores the result of the individual Move in the request.
   * ie move_results[i] = ResultOfProcessing(ProcessMoveRequest.moves[i])
   *
   * @generated from field: repeated weewar.v1.GameMoveResult move_results = 1;
   */
  moveResults: GameMoveResult[];

  /**
   * *
   * List of changes that resulted from the moves on the game state as a whole
   * For example 10 moves could have resulted in 2 unit creations and 4 city changes
   *
   * It is not clear if this is needed.  For example concatenating all changes from all the move_results *may* suffice
   * as long as the MoveProcessor is making sure that updates are atomic and snapshots the world state before 
   * starting a snapshot (and not just a move)
   *
   * @generated from field: repeated weewar.v1.WorldChange changes = 2;
   */
  changes: WorldChange[];
};

/**
 * Describes the message weewar.v1.ProcessMovesResponse.
 * Use `create(ProcessMovesResponseSchema)` to create a new message.
 */
export const ProcessMovesResponseSchema: GenMessage<ProcessMovesResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 16);

/**
 * *
 * Request to get the game's latest state
 *
 * @generated from message weewar.v1.GetGameStateRequest
 */
export type GetGameStateRequest = Message<"weewar.v1.GetGameStateRequest"> & {
  /**
   * *
   * Game ID to add moves to
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;
};

/**
 * Describes the message weewar.v1.GetGameStateRequest.
 * Use `create(GetGameStateRequestSchema)` to create a new message.
 */
export const GetGameStateRequestSchema: GenMessage<GetGameStateRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 17);

/**
 * *
 * Response holding latest game state
 *
 * @generated from message weewar.v1.GetGameStateResponse
 */
export type GetGameStateResponse = Message<"weewar.v1.GetGameStateResponse"> & {
  /**
   * @generated from field: weewar.v1.GameState state = 1;
   */
  state?: GameState;
};

/**
 * Describes the message weewar.v1.GetGameStateResponse.
 * Use `create(GetGameStateResponseSchema)` to create a new message.
 */
export const GetGameStateResponseSchema: GenMessage<GetGameStateResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 18);

/**
 * *
 * Request to list moves for a game
 *
 * @generated from message weewar.v1.ListMovesRequest
 */
export type ListMovesRequest = Message<"weewar.v1.ListMovesRequest"> & {
  /**
   * *
   * Game ID to add moves to
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * Offset of the move to begin fetching from in reverse order from "latest".
   * 0 => start from now
   *
   * @generated from field: int32 offset = 2;
   */
  offset: number;

  /**
   * *
   * Limit to last N moves (from offset).  if <= 0 return all moves
   *
   * @generated from field: int32 last_n = 3;
   */
  lastN: number;
};

/**
 * Describes the message weewar.v1.ListMovesRequest.
 * Use `create(ListMovesRequestSchema)` to create a new message.
 */
export const ListMovesRequestSchema: GenMessage<ListMovesRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 19);

/**
 * *
 * Response after adding moves to game.
 *
 * @generated from message weewar.v1.ListMovesResponse
 */
export type ListMovesResponse = Message<"weewar.v1.ListMovesResponse"> & {
  /**
   * Whether there are more moves before this
   *
   * @generated from field: bool has_more = 1;
   */
  hasMore: boolean;

  /**
   * @generated from field: repeated weewar.v1.GameMoveGroup move_groups = 2;
   */
  moveGroups: GameMoveGroup[];
};

/**
 * Describes the message weewar.v1.ListMovesResponse.
 * Use `create(ListMovesResponseSchema)` to create a new message.
 */
export const ListMovesResponseSchema: GenMessage<ListMovesResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 20);

/**
 * *
 * Request to get all available options at a position
 *
 * @generated from message weewar.v1.GetOptionsAtRequest
 */
export type GetOptionsAtRequest = Message<"weewar.v1.GetOptionsAtRequest"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: int32 q = 2;
   */
  q: number;

  /**
   * @generated from field: int32 r = 3;
   */
  r: number;
};

/**
 * Describes the message weewar.v1.GetOptionsAtRequest.
 * Use `create(GetOptionsAtRequestSchema)` to create a new message.
 */
export const GetOptionsAtRequestSchema: GenMessage<GetOptionsAtRequest> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 21);

/**
 * *
 * Response with all available options at a position
 *
 * @generated from message weewar.v1.GetOptionsAtResponse
 */
export type GetOptionsAtResponse = Message<"weewar.v1.GetOptionsAtResponse"> & {
  /**
   * @generated from field: repeated weewar.v1.GameOption options = 1;
   */
  options: GameOption[];

  /**
   * debug: current player in game
   *
   * @generated from field: int32 current_player = 2;
   */
  currentPlayer: number;

  /**
   * debug: whether game is properly initialized
   *
   * @generated from field: bool game_initialized = 3;
   */
  gameInitialized: boolean;
};

/**
 * Describes the message weewar.v1.GetOptionsAtResponse.
 * Use `create(GetOptionsAtResponseSchema)` to create a new message.
 */
export const GetOptionsAtResponseSchema: GenMessage<GetOptionsAtResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 22);

/**
 * *
 * A single game option available at a position
 *
 * @generated from message weewar.v1.GameOption
 */
export type GameOption = Message<"weewar.v1.GameOption"> & {
  /**
   * @generated from oneof weewar.v1.GameOption.option_type
   */
  optionType: {
    /**
     * @generated from field: weewar.v1.MoveOption move = 1;
     */
    value: MoveOption;
    case: "move";
  } | {
    /**
     * @generated from field: weewar.v1.AttackOption attack = 2;
     */
    value: AttackOption;
    case: "attack";
  } | {
    /**
     * @generated from field: weewar.v1.EndTurnOption end_turn = 3;
     */
    value: EndTurnOption;
    case: "endTurn";
  } | {
    /**
     * @generated from field: weewar.v1.BuildUnitOption build = 4;
     */
    value: BuildUnitOption;
    case: "build";
  } | {
    /**
     * @generated from field: weewar.v1.CaptureBuildingOption capture = 5;
     */
    value: CaptureBuildingOption;
    case: "capture";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message weewar.v1.GameOption.
 * Use `create(GameOptionSchema)` to create a new message.
 */
export const GameOptionSchema: GenMessage<GameOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 23);

/**
 * *
 * Option to end the current turn
 *
 * Empty - just indicates end turn is available
 *
 * @generated from message weewar.v1.EndTurnOption
 */
export type EndTurnOption = Message<"weewar.v1.EndTurnOption"> & {
};

/**
 * Describes the message weewar.v1.EndTurnOption.
 * Use `create(EndTurnOptionSchema)` to create a new message.
 */
export const EndTurnOptionSchema: GenMessage<EndTurnOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 24);

/**
 * *
 * Option to move to a specific coordinate
 *
 * @generated from message weewar.v1.MoveOption
 */
export type MoveOption = Message<"weewar.v1.MoveOption"> & {
  /**
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * @generated from field: int32 movement_cost = 3;
   */
  movementCost: number;

  /**
   * Ready-to-use action object for ProcessMoves
   *
   * @generated from field: weewar.v1.MoveUnitAction action = 4;
   */
  action?: MoveUnitAction;
};

/**
 * Describes the message weewar.v1.MoveOption.
 * Use `create(MoveOptionSchema)` to create a new message.
 */
export const MoveOptionSchema: GenMessage<MoveOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 25);

/**
 * *
 * A possible attack target
 *
 * @generated from message weewar.v1.AttackOption
 */
export type AttackOption = Message<"weewar.v1.AttackOption"> & {
  /**
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * Target unit type and health
   *
   * @generated from field: int32 target_unit_type = 3;
   */
  targetUnitType: number;

  /**
   * @generated from field: int32 target_unit_health = 4;
   */
  targetUnitHealth: number;

  /**
   * @generated from field: bool can_attack = 5;
   */
  canAttack: boolean;

  /**
   * Estimated damage this attack would deal
   *
   * @generated from field: int32 damage_estimate = 6;
   */
  damageEstimate: number;

  /**
   * Ready-to-use action object for ProcessMoves
   *
   * @generated from field: weewar.v1.AttackUnitAction action = 7;
   */
  action?: AttackUnitAction;
};

/**
 * Describes the message weewar.v1.AttackOption.
 * Use `create(AttackOptionSchema)` to create a new message.
 */
export const AttackOptionSchema: GenMessage<AttackOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 26);

/**
 * *
 * An option to build a unit (at a city tile)
 *
 * @generated from message weewar.v1.BuildUnitOption
 */
export type BuildUnitOption = Message<"weewar.v1.BuildUnitOption"> & {
  /**
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * @generated from field: int32 tile_type = 3;
   */
  tileType: number;

  /**
   * @generated from field: int32 build_cost = 4;
   */
  buildCost: number;
};

/**
 * Describes the message weewar.v1.BuildUnitOption.
 * Use `create(BuildUnitOptionSchema)` to create a new message.
 */
export const BuildUnitOptionSchema: GenMessage<BuildUnitOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 27);

/**
 * *
 * A move where a unit can capture a building
 *
 * @generated from message weewar.v1.CaptureBuildingOption
 */
export type CaptureBuildingOption = Message<"weewar.v1.CaptureBuildingOption"> & {
  /**
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * @generated from field: int32 tile_type = 3;
   */
  tileType: number;
};

/**
 * Describes the message weewar.v1.CaptureBuildingOption.
 * Use `create(CaptureBuildingOptionSchema)` to create a new message.
 */
export const CaptureBuildingOptionSchema: GenMessage<CaptureBuildingOption> = /*@__PURE__*/
  messageDesc(file_weewar_v1_games, 28);

/**
 * GamesService manages the game examples catalog
 *
 * @generated from service weewar.v1.GamesService
 */
export const GamesService: GenService<{
  /**
   * *
   * Create a new game
   *
   * @generated from rpc weewar.v1.GamesService.CreateGame
   */
  createGame: {
    methodKind: "unary";
    input: typeof CreateGameRequestSchema;
    output: typeof CreateGameResponseSchema;
  },
  /**
   * *
   * Batch get multiple games by ID
   *
   * @generated from rpc weewar.v1.GamesService.GetGames
   */
  getGames: {
    methodKind: "unary";
    input: typeof GetGamesRequestSchema;
    output: typeof GetGamesResponseSchema;
  },
  /**
   * ListGames returns all available games
   *
   * @generated from rpc weewar.v1.GamesService.ListGames
   */
  listGames: {
    methodKind: "unary";
    input: typeof ListGamesRequestSchema;
    output: typeof ListGamesResponseSchema;
  },
  /**
   * GetGame returns a specific game with metadata
   *
   * @generated from rpc weewar.v1.GamesService.GetGame
   */
  getGame: {
    methodKind: "unary";
    input: typeof GetGameRequestSchema;
    output: typeof GetGameResponseSchema;
  },
  /**
   * *
   * Delete a particular game
   *
   * @generated from rpc weewar.v1.GamesService.DeleteGame
   */
  deleteGame: {
    methodKind: "unary";
    input: typeof DeleteGameRequestSchema;
    output: typeof DeleteGameResponseSchema;
  },
  /**
   * GetGame returns a specific game with metadata
   *
   * @generated from rpc weewar.v1.GamesService.UpdateGame
   */
  updateGame: {
    methodKind: "unary";
    input: typeof UpdateGameRequestSchema;
    output: typeof UpdateGameResponseSchema;
  },
  /**
   * Gets the latest game state
   *
   * @generated from rpc weewar.v1.GamesService.GetGameState
   */
  getGameState: {
    methodKind: "unary";
    input: typeof GetGameStateRequestSchema;
    output: typeof GetGameStateResponseSchema;
  },
  /**
   * List the moves for a game
   *
   * @generated from rpc weewar.v1.GamesService.ListMoves
   */
  listMoves: {
    methodKind: "unary";
    input: typeof ListMovesRequestSchema;
    output: typeof ListMovesResponseSchema;
  },
  /**
   * @generated from rpc weewar.v1.GamesService.ProcessMoves
   */
  processMoves: {
    methodKind: "unary";
    input: typeof ProcessMovesRequestSchema;
    output: typeof ProcessMovesResponseSchema;
  },
  /**
   * @generated from rpc weewar.v1.GamesService.GetOptionsAt
   */
  getOptionsAt: {
    methodKind: "unary";
    input: typeof GetOptionsAtRequestSchema;
    output: typeof GetOptionsAtResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_weewar_v1_games, 0);

