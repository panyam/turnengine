// protos/apptemplate/v1/models.proto

// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file weewar/v1/models.proto (package weewar.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file weewar/v1/models.proto.
 */
export const file_weewar_v1_models: GenFile = /*@__PURE__*/
  fileDesc("ChZ3ZWV3YXIvdjEvbW9kZWxzLnByb3RvEgl3ZWV3YXIudjEiygEKBFVzZXISLgoKY3JlYXRlZF9hdBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASCgoCaWQYAyABKAkSDAoEbmFtZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIMCgR0YWdzGAYgAygJEhEKCWltYWdlX3VybBgHIAEoCRISCgpkaWZmaWN1bHR5GAggASgJIkYKClBhZ2luYXRpb24SEAoIcGFnZV9rZXkYASABKAkSEwoLcGFnZV9vZmZzZXQYAiABKAUSEQoJcGFnZV9zaXplGAMgASgFIm4KElBhZ2luYXRpb25SZXNwb25zZRIVCg1uZXh0X3BhZ2Vfa2V5GAIgASgJEhgKEG5leHRfcGFnZV9vZmZzZXQYAyABKAUSEAoIaGFzX21vcmUYBCABKAgSFQoNdG90YWxfcmVzdWx0cxgFIAEoBSKJAgoFV29ybGQSLgoKY3JlYXRlZF9hdBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASCgoCaWQYAyABKAkSEgoKY3JlYXRvcl9pZBgEIAEoCRIMCgRuYW1lGAUgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJEgwKBHRhZ3MYByADKAkSEQoJaW1hZ2VfdXJsGAggASgJEhIKCmRpZmZpY3VsdHkYCSABKAkSKAoKd29ybGRfZGF0YRgKIAEoCzIULndlZXdhci52MS5Xb3JsZERhdGEiSwoJV29ybGREYXRhEh4KBXRpbGVzGAEgAygLMg8ud2Vld2FyLnYxLlRpbGUSHgoFdW5pdHMYAiADKAsyDy53ZWV3YXIudjEuVW5pdCI/CgRUaWxlEgkKAXEYASABKAUSCQoBchgCIAEoBRIRCgl0aWxlX3R5cGUYAyABKAUSDgoGcGxheWVyGAQgASgFIoYBCgRVbml0EgkKAXEYASABKAUSCQoBchgCIAEoBRIOCgZwbGF5ZXIYAyABKAUSEQoJdW5pdF90eXBlGAQgASgFEhgKEGF2YWlsYWJsZV9oZWFsdGgYBSABKAUSFQoNZGlzdGFuY2VfbGVmdBgGIAEoBRIUCgx0dXJuX2NvdW50ZXIYByABKAUifwoRVGVycmFpbkRlZmluaXRpb24SCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIWCg5iYXNlX21vdmVfY29zdBgDIAEoARIVCg1kZWZlbnNlX2JvbnVzGAQgASgBEgwKBHR5cGUYBSABKAUSEwoLZGVzY3JpcHRpb24YBiABKAkifQoOVW5pdERlZmluaXRpb24SCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIXCg9tb3ZlbWVudF9wb2ludHMYAyABKAUSFAoMYXR0YWNrX3JhbmdlGAQgASgFEg4KBmhlYWx0aBgFIAEoBRISCgpwcm9wZXJ0aWVzGAYgAygJIo4BCg5Nb3ZlbWVudE1hdHJpeBIzCgVjb3N0cxgBIAMoCzIkLndlZXdhci52MS5Nb3ZlbWVudE1hdHJpeC5Db3N0c0VudHJ5GkcKCkNvc3RzRW50cnkSCwoDa2V5GAEgASgFEigKBXZhbHVlGAIgASgLMhkud2Vld2FyLnYxLlRlcnJhaW5Db3N0TWFwOgI4ASKJAQoOVGVycmFpbkNvc3RNYXASQgoNdGVycmFpbl9jb3N0cxgBIAMoCzIrLndlZXdhci52MS5UZXJyYWluQ29zdE1hcC5UZXJyYWluQ29zdHNFbnRyeRozChFUZXJyYWluQ29zdHNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAE6AjgBIp4CCgRHYW1lEi4KCmNyZWF0ZWRfYXQYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnVwZGF0ZWRfYXQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEgoKAmlkGAMgASgJEhIKCmNyZWF0b3JfaWQYBCABKAkSEAoId29ybGRfaWQYBSABKAkSDAoEbmFtZRgGIAEoCRITCgtkZXNjcmlwdGlvbhgHIAEoCRIMCgR0YWdzGAggAygJEhEKCWltYWdlX3VybBgJIAEoCRISCgpkaWZmaWN1bHR5GAogASgJEiwKBmNvbmZpZxgLIAEoCzIcLndlZXdhci52MS5HYW1lQ29uZmlndXJhdGlvbiJmChFHYW1lQ29uZmlndXJhdGlvbhImCgdwbGF5ZXJzGAEgAygLMhUud2Vld2FyLnYxLkdhbWVQbGF5ZXISKQoIc2V0dGluZ3MYAiABKAsyFy53ZWV3YXIudjEuR2FtZVNldHRpbmdzIlQKCkdhbWVQbGF5ZXISEQoJcGxheWVyX2lkGAEgASgFEhMKC3BsYXllcl90eXBlGAIgASgJEg0KBWNvbG9yGAMgASgJEg8KB3RlYW1faWQYBCABKAUiZAoMR2FtZVNldHRpbmdzEhUKDWFsbG93ZWRfdW5pdHMYASADKAUSFwoPdHVybl90aW1lX2xpbWl0GAIgASgFEhEKCXRlYW1fbW9kZRgDIAEoCRIRCgltYXhfdHVybnMYBCABKAUipAEKCUdhbWVTdGF0ZRIuCgp1cGRhdGVkX2F0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdnYW1lX2lkGAMgASgJEhQKDHR1cm5fY291bnRlchgEIAEoBRIWCg5jdXJyZW50X3BsYXllchgFIAEoBRIoCgp3b3JsZF9kYXRhGAYgASgLMhQud2Vld2FyLnYxLldvcmxkRGF0YSJMCg9HYW1lTW92ZUhpc3RvcnkSDwoHZ2FtZV9pZBgBIAEoCRIoCgZncm91cHMYAiADKAsyGC53ZWV3YXIudjEuR2FtZU1vdmVHcm91cCLCAQoNR2FtZU1vdmVHcm91cBIuCgpzdGFydGVkX2F0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASIgoFbW92ZXMYBCADKAsyEy53ZWV3YXIudjEuR2FtZU1vdmUSLwoMbW92ZV9yZXN1bHRzGAUgAygLMhkud2Vld2FyLnYxLkdhbWVNb3ZlUmVzdWx0Iv4BCghHYW1lTW92ZRIOCgZwbGF5ZXIYASABKAUSLQoJdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIUCgxzZXF1ZW5jZV9udW0YAyABKAMSLgoJbW92ZV91bml0GAQgASgLMhkud2Vld2FyLnYxLk1vdmVVbml0QWN0aW9uSAASMgoLYXR0YWNrX3VuaXQYBSABKAsyGy53ZWV3YXIudjEuQXR0YWNrVW5pdEFjdGlvbkgAEiwKCGVuZF90dXJuGAYgASgLMhgud2Vld2FyLnYxLkVuZFR1cm5BY3Rpb25IAEILCgltb3ZlX3R5cGUiZQoOR2FtZU1vdmVSZXN1bHQSFAoMaXNfcGVybWFuZW50GAEgASgIEhQKDHNlcXVlbmNlX251bRgCIAEoAxInCgdjaGFuZ2VzGAMgAygLMhYud2Vld2FyLnYxLldvcmxkQ2hhbmdlIkwKDk1vdmVVbml0QWN0aW9uEg4KBmZyb21fcRgBIAEoBRIOCgZmcm9tX3IYAiABKAUSDAoEdG9fcRgDIAEoBRIMCgR0b19yGAQgASgFImIKEEF0dGFja1VuaXRBY3Rpb24SEgoKYXR0YWNrZXJfcRgBIAEoBRISCgphdHRhY2tlcl9yGAIgASgFEhIKCmRlZmVuZGVyX3EYAyABKAUSEgoKZGVmZW5kZXJfchgEIAEoBSIPCg1FbmRUdXJuQWN0aW9uIvIBCgtXb3JsZENoYW5nZRIwCgp1bml0X21vdmVkGAEgASgLMhoud2Vld2FyLnYxLlVuaXRNb3ZlZENoYW5nZUgAEjQKDHVuaXRfZGFtYWdlZBgCIAEoCzIcLndlZXdhci52MS5Vbml0RGFtYWdlZENoYW5nZUgAEjIKC3VuaXRfa2lsbGVkGAMgASgLMhsud2Vld2FyLnYxLlVuaXRLaWxsZWRDaGFuZ2VIABI4Cg5wbGF5ZXJfY2hhbmdlZBgEIAEoCzIeLndlZXdhci52MS5QbGF5ZXJDaGFuZ2VkQ2hhbmdlSABCDQoLY2hhbmdlX3R5cGUiTQoPVW5pdE1vdmVkQ2hhbmdlEg4KBmZyb21fcRgCIAEoBRIOCgZmcm9tX3IYAyABKAUSDAoEdG9fcRgEIAEoBRIMCgR0b19yGAUgASgFIlYKEVVuaXREYW1hZ2VkQ2hhbmdlEhcKD3ByZXZpb3VzX2hlYWx0aBgCIAEoBRISCgpuZXdfaGVhbHRoGAMgASgFEgkKAXEYBCABKAUSCQoBchgFIAEoBSJLChBVbml0S2lsbGVkQ2hhbmdlEg4KBnBsYXllchgCIAEoBRIRCgl1bml0X3R5cGUYAyABKAUSCQoBcRgEIAEoBRIJCgFyGAUgASgFImsKE1BsYXllckNoYW5nZWRDaGFuZ2USFwoPcHJldmlvdXNfcGxheWVyGAEgASgFEhIKCm5ld19wbGF5ZXIYAiABKAUSFQoNcHJldmlvdXNfdHVybhgDIAEoBRIQCghuZXdfdHVybhgEIAEoBUKdAQoNY29tLndlZXdhci52MUILTW9kZWxzUHJvdG9QAVo6Z2l0aHViLmNvbS9wYW55YW0vdHVybmVuZ2luZS9nYW1lcy93ZWV3YXIvZ2VuL2dvL3dlZXdhci92MaICA1dYWKoCCVdlZXdhci5WMcoCCVdlZXdhclxWMeICFVdlZXdhclxWMVxHUEJNZXRhZGF0YeoCCldlZXdhcjo6VjFiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * @generated from message weewar.v1.User
 */
export type User = Message<"weewar.v1.User"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique ID for the user
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * Name if items have names
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Description if user has a description
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Some tags
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * A possible image url
   *
   * @generated from field: string image_url = 7;
   */
  imageUrl: string;

  /**
   * Difficulty - example attribute
   *
   * @generated from field: string difficulty = 8;
   */
  difficulty: string;
};

/**
 * Describes the message weewar.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export const UserSchema: GenMessage<User> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 0);

/**
 * @generated from message weewar.v1.Pagination
 */
export type Pagination = Message<"weewar.v1.Pagination"> & {
  /**
   * *
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   *
   * @generated from field: string page_key = 1;
   */
  pageKey: string;

  /**
   * *
   * If a pagekey is not supported we can also support a direct integer offset
   * for cases where it makes sense.
   *
   * @generated from field: int32 page_offset = 2;
   */
  pageOffset: number;

  /**
   * *
   * Number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message weewar.v1.Pagination.
 * Use `create(PaginationSchema)` to create a new message.
 */
export const PaginationSchema: GenMessage<Pagination> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 1);

/**
 * @generated from message weewar.v1.PaginationResponse
 */
export type PaginationResponse = Message<"weewar.v1.PaginationResponse"> & {
  /**
   * *
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   *
   * @generated from field: string next_page_key = 2;
   */
  nextPageKey: string;

  /**
   * *
   * Also support an integer offset if possible
   *
   * @generated from field: int32 next_page_offset = 3;
   */
  nextPageOffset: number;

  /**
   * *
   * Whether theere are more results.
   *
   * @generated from field: bool has_more = 4;
   */
  hasMore: boolean;

  /**
   * *
   * Total number of results.
   *
   * @generated from field: int32 total_results = 5;
   */
  totalResults: number;
};

/**
 * Describes the message weewar.v1.PaginationResponse.
 * Use `create(PaginationResponseSchema)` to create a new message.
 */
export const PaginationResponseSchema: GenMessage<PaginationResponse> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 2);

/**
 * @generated from message weewar.v1.World
 */
export type World = Message<"weewar.v1.World"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique ID for the world
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * User that created the world
   *
   * @generated from field: string creator_id = 4;
   */
  creatorId: string;

  /**
   * Name if items have names
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * Description if world has a description
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * Some tags
   *
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];

  /**
   * A possible image url
   *
   * @generated from field: string image_url = 8;
   */
  imageUrl: string;

  /**
   * Difficulty - example attribute
   *
   * @generated from field: string difficulty = 9;
   */
  difficulty: string;

  /**
   * The actual world contents/data
   *
   * @generated from field: weewar.v1.WorldData world_data = 10;
   */
  worldData?: WorldData;
};

/**
 * Describes the message weewar.v1.World.
 * Use `create(WorldSchema)` to create a new message.
 */
export const WorldSchema: GenMessage<World> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 3);

/**
 * @generated from message weewar.v1.WorldData
 */
export type WorldData = Message<"weewar.v1.WorldData"> & {
  /**
   * JSON-fied tile data about what units and terrains are at each location
   *
   * @generated from field: repeated weewar.v1.Tile tiles = 1;
   */
  tiles: Tile[];

  /**
   * All units on the world and who they belong to
   *
   * @generated from field: repeated weewar.v1.Unit units = 2;
   */
  units: Unit[];
};

/**
 * Describes the message weewar.v1.WorldData.
 * Use `create(WorldDataSchema)` to create a new message.
 */
export const WorldDataSchema: GenMessage<WorldData> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 4);

/**
 * @generated from message weewar.v1.Tile
 */
export type Tile = Message<"weewar.v1.Tile"> & {
  /**
   * Q and R in Cubed coordinates
   *
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * Tile type
   *
   * @generated from field: int32 tile_type = 3;
   */
  tileType: number;

  /**
   * Whether the tile itself belongs to a player
   *
   * @generated from field: int32 player = 4;
   */
  player: number;
};

/**
 * Describes the message weewar.v1.Tile.
 * Use `create(TileSchema)` to create a new message.
 */
export const TileSchema: GenMessage<Tile> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 5);

/**
 * @generated from message weewar.v1.Unit
 */
export type Unit = Message<"weewar.v1.Unit"> & {
  /**
   * Q and R in Cubed coordinates
   *
   * @generated from field: int32 q = 1;
   */
  q: number;

  /**
   * @generated from field: int32 r = 2;
   */
  r: number;

  /**
   * @generated from field: int32 player = 3;
   */
  player: number;

  /**
   * @generated from field: int32 unit_type = 4;
   */
  unitType: number;

  /**
   * Runtime state fields
   *
   * Current health points
   *
   * @generated from field: int32 available_health = 5;
   */
  availableHealth: number;

  /**
   * Movement points remaining this turn
   *
   * @generated from field: int32 distance_left = 6;
   */
  distanceLeft: number;

  /**
   * Which turn this unit was created/last acted
   *
   * @generated from field: int32 turn_counter = 7;
   */
  turnCounter: number;
};

/**
 * Describes the message weewar.v1.Unit.
 * Use `create(UnitSchema)` to create a new message.
 */
export const UnitSchema: GenMessage<Unit> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 6);

/**
 * Rules engine terrain definition
 *
 * @generated from message weewar.v1.TerrainDefinition
 */
export type TerrainDefinition = Message<"weewar.v1.TerrainDefinition"> & {
  /**
   * Terrain type ID
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Display name (e.g., "Grass", "Mountain")  
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Base movement cost
   *
   * @generated from field: double base_move_cost = 3;
   */
  baseMoveCost: number;

  /**
   * Defense bonus multiplier (0.0 to 1.0)
   *
   * @generated from field: double defense_bonus = 4;
   */
  defenseBonus: number;

  /**
   * Terrain category type
   *
   * @generated from field: int32 type = 5;
   */
  type: number;

  /**
   * Human-readable description
   *
   * @generated from field: string description = 6;
   */
  description: string;
};

/**
 * Describes the message weewar.v1.TerrainDefinition.
 * Use `create(TerrainDefinitionSchema)` to create a new message.
 */
export const TerrainDefinitionSchema: GenMessage<TerrainDefinition> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 7);

/**
 * Rules engine unit definition  
 *
 * @generated from message weewar.v1.UnitDefinition
 */
export type UnitDefinition = Message<"weewar.v1.UnitDefinition"> & {
  /**
   * Unit type ID
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Display name (e.g., "Infantry", "Tank")
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Maximum movement per turn
   *
   * @generated from field: int32 movement_points = 3;
   */
  movementPoints: number;

  /**
   * Attack range in tiles
   *
   * @generated from field: int32 attack_range = 4;
   */
  attackRange: number;

  /**
   * Maximum health points
   *
   * @generated from field: int32 health = 5;
   */
  health: number;

  /**
   * Special properties/abilities
   *
   * @generated from field: repeated string properties = 6;
   */
  properties: string[];
};

/**
 * Describes the message weewar.v1.UnitDefinition.
 * Use `create(UnitDefinitionSchema)` to create a new message.
 */
export const UnitDefinitionSchema: GenMessage<UnitDefinition> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 8);

/**
 * Movement cost matrix for unit types on terrain types
 *
 * @generated from message weewar.v1.MovementMatrix
 */
export type MovementMatrix = Message<"weewar.v1.MovementMatrix"> & {
  /**
   * Map of unit_id -> (terrain_id -> movement_cost)
   *
   * @generated from field: map<int32, weewar.v1.TerrainCostMap> costs = 1;
   */
  costs: { [key: number]: TerrainCostMap };
};

/**
 * Describes the message weewar.v1.MovementMatrix.
 * Use `create(MovementMatrixSchema)` to create a new message.
 */
export const MovementMatrixSchema: GenMessage<MovementMatrix> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 9);

/**
 * @generated from message weewar.v1.TerrainCostMap
 */
export type TerrainCostMap = Message<"weewar.v1.TerrainCostMap"> & {
  /**
   * Map of terrain_id -> movement_cost  
   *
   * @generated from field: map<int32, double> terrain_costs = 1;
   */
  terrainCosts: { [key: number]: number };
};

/**
 * Describes the message weewar.v1.TerrainCostMap.
 * Use `create(TerrainCostMapSchema)` to create a new message.
 */
export const TerrainCostMapSchema: GenMessage<TerrainCostMap> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 10);

/**
 * Describes a game and its metadata
 *
 * @generated from message weewar.v1.Game
 */
export type Game = Message<"weewar.v1.Game"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique ID for the game
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * User who started/created the game
   *
   * @generated from field: string creator_id = 4;
   */
  creatorId: string;

  /**
   * The world this game was created from
   *
   * @generated from field: string world_id = 5;
   */
  worldId: string;

  /**
   * Name if items have names
   *
   * @generated from field: string name = 6;
   */
  name: string;

  /**
   * Description if game has a description
   *
   * @generated from field: string description = 7;
   */
  description: string;

  /**
   * Some tags
   *
   * @generated from field: repeated string tags = 8;
   */
  tags: string[];

  /**
   * A possible image url
   *
   * @generated from field: string image_url = 9;
   */
  imageUrl: string;

  /**
   * Difficulty - example attribute
   *
   * @generated from field: string difficulty = 10;
   */
  difficulty: string;

  /**
   * Game configuration
   *
   * @generated from field: weewar.v1.GameConfiguration config = 11;
   */
  config?: GameConfiguration;
};

/**
 * Describes the message weewar.v1.Game.
 * Use `create(GameSchema)` to create a new message.
 */
export const GameSchema: GenMessage<Game> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 11);

/**
 * @generated from message weewar.v1.GameConfiguration
 */
export type GameConfiguration = Message<"weewar.v1.GameConfiguration"> & {
  /**
   * Player configuration
   *
   * @generated from field: repeated weewar.v1.GamePlayer players = 1;
   */
  players: GamePlayer[];

  /**
   * Game settings
   *
   * @generated from field: weewar.v1.GameSettings settings = 2;
   */
  settings?: GameSettings;
};

/**
 * Describes the message weewar.v1.GameConfiguration.
 * Use `create(GameConfigurationSchema)` to create a new message.
 */
export const GameConfigurationSchema: GenMessage<GameConfiguration> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 12);

/**
 * @generated from message weewar.v1.GamePlayer
 */
export type GamePlayer = Message<"weewar.v1.GamePlayer"> & {
  /**
   * Player ID (1-based)
   *
   * @generated from field: int32 player_id = 1;
   */
  playerId: number;

  /**
   * Player type
   *
   * "human", "ai", "open"
   *
   * @generated from field: string player_type = 2;
   */
  playerType: string;

  /**
   * Player color
   *
   * @generated from field: string color = 3;
   */
  color: string;

  /**
   * Team ID (0 = no team, 1+ = team number)
   *
   * @generated from field: int32 team_id = 4;
   */
  teamId: number;
};

/**
 * Describes the message weewar.v1.GamePlayer.
 * Use `create(GamePlayerSchema)` to create a new message.
 */
export const GamePlayerSchema: GenMessage<GamePlayer> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 13);

/**
 * @generated from message weewar.v1.GameSettings
 */
export type GameSettings = Message<"weewar.v1.GameSettings"> & {
  /**
   * List of allowed unit type IDs
   *
   * @generated from field: repeated int32 allowed_units = 1;
   */
  allowedUnits: number[];

  /**
   * Turn time limit in seconds (0 = no limit)
   *
   * @generated from field: int32 turn_time_limit = 2;
   */
  turnTimeLimit: number;

  /**
   * Team mode
   *
   * "ffa" or "teams"
   *
   * @generated from field: string team_mode = 3;
   */
  teamMode: string;

  /**
   * Maximum number of turns (0 = unlimited)
   *
   * @generated from field: int32 max_turns = 4;
   */
  maxTurns: number;
};

/**
 * Describes the message weewar.v1.GameSettings.
 * Use `create(GameSettingsSchema)` to create a new message.
 */
export const GameSettingsSchema: GenMessage<GameSettings> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 14);

/**
 * Holds the game's Active/Current state (eg world state)
 *
 * @generated from message weewar.v1.GameState
 */
export type GameState = Message<"weewar.v1.GameState"> & {
  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * ID of the game whos state is being tracked
   *
   * @generated from field: string game_id = 3;
   */
  gameId: string;

  /**
   * @generated from field: int32 turn_counter = 4;
   */
  turnCounter: number;

  /**
   * @generated from field: int32 current_player = 5;
   */
  currentPlayer: number;

  /**
   * Current world state
   *
   * @generated from field: weewar.v1.WorldData world_data = 6;
   */
  worldData?: WorldData;
};

/**
 * Describes the message weewar.v1.GameState.
 * Use `create(GameStateSchema)` to create a new message.
 */
export const GameStateSchema: GenMessage<GameState> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 15);

/**
 * Holds the game's move history (can be used as a replay log)
 *
 * @generated from message weewar.v1.GameMoveHistory
 */
export type GameMoveHistory = Message<"weewar.v1.GameMoveHistory"> & {
  /**
   * Move history for the game
   *
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * Each entry in our history is a "group" of moves
   *
   * @generated from field: repeated weewar.v1.GameMoveGroup groups = 2;
   */
  groups: GameMoveGroup[];
};

/**
 * Describes the message weewar.v1.GameMoveHistory.
 * Use `create(GameMoveHistorySchema)` to create a new message.
 */
export const GameMoveHistorySchema: GenMessage<GameMoveHistory> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 16);

/**
 * A move group - we can allow X moves in one "tick"
 *
 * @generated from message weewar.v1.GameMoveGroup
 */
export type GameMoveGroup = Message<"weewar.v1.GameMoveGroup"> & {
  /**
   * When the moves happened (or were submitted)
   *
   * @generated from field: google.protobuf.Timestamp started_at = 2;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp ended_at = 3;
   */
  endedAt?: Timestamp;

  /**
   * *
   * List of moves to add - 
   *
   * @generated from field: repeated weewar.v1.GameMove moves = 4;
   */
  moves: GameMove[];

  /**
   *
   * Each game move result stores the result of the individual Move in the request.
   * ie move_results[i] = ResultOfProcessing(ProcessMoveRequest.moves[i])
   *
   * @generated from field: repeated weewar.v1.GameMoveResult move_results = 5;
   */
  moveResults: GameMoveResult[];
};

/**
 * Describes the message weewar.v1.GameMoveGroup.
 * Use `create(GameMoveGroupSchema)` to create a new message.
 */
export const GameMoveGroupSchema: GenMessage<GameMoveGroup> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 17);

/**
 * *
 * Represents a single move which can be one of many actions in the game
 *
 * @generated from message weewar.v1.GameMove
 */
export type GameMove = Message<"weewar.v1.GameMove"> & {
  /**
   * The player making the move
   *
   * @generated from field: int32 player = 1;
   */
  player: number;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * A monotonically increasing and unique (within the game) sequence number for the move
   * This is generated by the server
   *
   * @generated from field: int64 sequence_num = 3;
   */
  sequenceNum: bigint;

  /**
   * @generated from oneof weewar.v1.GameMove.move_type
   */
  moveType: {
    /**
     * @generated from field: weewar.v1.MoveUnitAction move_unit = 4;
     */
    value: MoveUnitAction;
    case: "moveUnit";
  } | {
    /**
     * @generated from field: weewar.v1.AttackUnitAction attack_unit = 5;
     */
    value: AttackUnitAction;
    case: "attackUnit";
  } | {
    /**
     * @generated from field: weewar.v1.EndTurnAction end_turn = 6;
     */
    value: EndTurnAction;
    case: "endTurn";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message weewar.v1.GameMove.
 * Use `create(GameMoveSchema)` to create a new message.
 */
export const GameMoveSchema: GenMessage<GameMove> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 18);

/**
 * *
 * Represents the result of executing a move
 *
 * @generated from message weewar.v1.GameMoveResult
 */
export type GameMoveResult = Message<"weewar.v1.GameMoveResult"> & {
  /**
   * Whether the result is permenant and can be undone.
   * Just moving a unit for example is not permanent, but attacking a unit
   * would be (ie a player cannot undo it).
   *
   * @generated from field: bool is_permanent = 1;
   */
  isPermanent: boolean;

  /**
   * A monotonically increasing and unique (within the game) sequence number for the move
   *
   * @generated from field: int64 sequence_num = 2;
   */
  sequenceNum: bigint;

  /**
   * A set of changes to the world as a result of making this move
   *
   * @generated from field: repeated weewar.v1.WorldChange changes = 3;
   */
  changes: WorldChange[];
};

/**
 * Describes the message weewar.v1.GameMoveResult.
 * Use `create(GameMoveResultSchema)` to create a new message.
 */
export const GameMoveResultSchema: GenMessage<GameMoveResult> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 19);

/**
 * *
 * Move unit from one position to another
 *
 * @generated from message weewar.v1.MoveUnitAction
 */
export type MoveUnitAction = Message<"weewar.v1.MoveUnitAction"> & {
  /**
   * @generated from field: int32 from_q = 1;
   */
  fromQ: number;

  /**
   * @generated from field: int32 from_r = 2;
   */
  fromR: number;

  /**
   * @generated from field: int32 to_q = 3;
   */
  toQ: number;

  /**
   * @generated from field: int32 to_r = 4;
   */
  toR: number;
};

/**
 * Describes the message weewar.v1.MoveUnitAction.
 * Use `create(MoveUnitActionSchema)` to create a new message.
 */
export const MoveUnitActionSchema: GenMessage<MoveUnitAction> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 20);

/**
 * *
 * Attack with one unit against another
 *
 * @generated from message weewar.v1.AttackUnitAction
 */
export type AttackUnitAction = Message<"weewar.v1.AttackUnitAction"> & {
  /**
   * @generated from field: int32 attacker_q = 1;
   */
  attackerQ: number;

  /**
   * @generated from field: int32 attacker_r = 2;
   */
  attackerR: number;

  /**
   * @generated from field: int32 defender_q = 3;
   */
  defenderQ: number;

  /**
   * @generated from field: int32 defender_r = 4;
   */
  defenderR: number;
};

/**
 * Describes the message weewar.v1.AttackUnitAction.
 * Use `create(AttackUnitActionSchema)` to create a new message.
 */
export const AttackUnitActionSchema: GenMessage<AttackUnitAction> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 21);

/**
 * *
 * End current player's turn
 *
 * No additional fields needed
 *
 * @generated from message weewar.v1.EndTurnAction
 */
export type EndTurnAction = Message<"weewar.v1.EndTurnAction"> & {
};

/**
 * Describes the message weewar.v1.EndTurnAction.
 * Use `create(EndTurnActionSchema)` to create a new message.
 */
export const EndTurnActionSchema: GenMessage<EndTurnAction> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 22);

/**
 * *
 * Represents a change to the game world
 *
 * @generated from message weewar.v1.WorldChange
 */
export type WorldChange = Message<"weewar.v1.WorldChange"> & {
  /**
   * When did this change happen
   *
   * @generated from oneof weewar.v1.WorldChange.change_type
   */
  changeType: {
    /**
     * @generated from field: weewar.v1.UnitMovedChange unit_moved = 1;
     */
    value: UnitMovedChange;
    case: "unitMoved";
  } | {
    /**
     * @generated from field: weewar.v1.UnitDamagedChange unit_damaged = 2;
     */
    value: UnitDamagedChange;
    case: "unitDamaged";
  } | {
    /**
     * @generated from field: weewar.v1.UnitKilledChange unit_killed = 3;
     */
    value: UnitKilledChange;
    case: "unitKilled";
  } | {
    /**
     * @generated from field: weewar.v1.PlayerChangedChange player_changed = 4;
     */
    value: PlayerChangedChange;
    case: "playerChanged";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message weewar.v1.WorldChange.
 * Use `create(WorldChangeSchema)` to create a new message.
 */
export const WorldChangeSchema: GenMessage<WorldChange> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 23);

/**
 * *
 * A unit moved from one position to another
 *
 * @generated from message weewar.v1.UnitMovedChange
 */
export type UnitMovedChange = Message<"weewar.v1.UnitMovedChange"> & {
  /**
   * @generated from field: int32 from_q = 2;
   */
  fromQ: number;

  /**
   * @generated from field: int32 from_r = 3;
   */
  fromR: number;

  /**
   * @generated from field: int32 to_q = 4;
   */
  toQ: number;

  /**
   * @generated from field: int32 to_r = 5;
   */
  toR: number;
};

/**
 * Describes the message weewar.v1.UnitMovedChange.
 * Use `create(UnitMovedChangeSchema)` to create a new message.
 */
export const UnitMovedChangeSchema: GenMessage<UnitMovedChange> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 24);

/**
 * *
 * A unit took damage
 *
 * @generated from message weewar.v1.UnitDamagedChange
 */
export type UnitDamagedChange = Message<"weewar.v1.UnitDamagedChange"> & {
  /**
   * @generated from field: int32 previous_health = 2;
   */
  previousHealth: number;

  /**
   * @generated from field: int32 new_health = 3;
   */
  newHealth: number;

  /**
   * @generated from field: int32 q = 4;
   */
  q: number;

  /**
   * @generated from field: int32 r = 5;
   */
  r: number;
};

/**
 * Describes the message weewar.v1.UnitDamagedChange.
 * Use `create(UnitDamagedChangeSchema)` to create a new message.
 */
export const UnitDamagedChangeSchema: GenMessage<UnitDamagedChange> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 25);

/**
 * *
 * A unit was killed
 *
 * @generated from message weewar.v1.UnitKilledChange
 */
export type UnitKilledChange = Message<"weewar.v1.UnitKilledChange"> & {
  /**
   * @generated from field: int32 player = 2;
   */
  player: number;

  /**
   * @generated from field: int32 unit_type = 3;
   */
  unitType: number;

  /**
   * @generated from field: int32 q = 4;
   */
  q: number;

  /**
   * @generated from field: int32 r = 5;
   */
  r: number;
};

/**
 * Describes the message weewar.v1.UnitKilledChange.
 * Use `create(UnitKilledChangeSchema)` to create a new message.
 */
export const UnitKilledChangeSchema: GenMessage<UnitKilledChange> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 26);

/**
 * *
 * Active player changed
 *
 * @generated from message weewar.v1.PlayerChangedChange
 */
export type PlayerChangedChange = Message<"weewar.v1.PlayerChangedChange"> & {
  /**
   * @generated from field: int32 previous_player = 1;
   */
  previousPlayer: number;

  /**
   * @generated from field: int32 new_player = 2;
   */
  newPlayer: number;

  /**
   * @generated from field: int32 previous_turn = 3;
   */
  previousTurn: number;

  /**
   * @generated from field: int32 new_turn = 4;
   */
  newTurn: number;
};

/**
 * Describes the message weewar.v1.PlayerChangedChange.
 * Use `create(PlayerChangedChangeSchema)` to create a new message.
 */
export const PlayerChangedChangeSchema: GenMessage<PlayerChangedChange> = /*@__PURE__*/
  messageDesc(file_weewar_v1_models, 27);

