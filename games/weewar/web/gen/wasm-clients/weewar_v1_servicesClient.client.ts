// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: weewar/v1/models.proto
import {
		CreateGameResponse, 
		GetGameRequest, 
		GetAttackOptionsResponse, 
		CanSelectUnitRequest, 
		GetGamesResponse, 
		ListGamesRequest, 
		DeleteGameResponse, 
		UpdateGameResponse, 
		GetGameStateRequest, 
		ListMovesResponse, 
		ProcessMovesResponse, 
		GetMovementOptionsRequest, 
		GetGamesRequest, 
		ListGamesResponse, 
		GetGameResponse, 
		DeleteGameRequest, 
		ListMovesRequest, 
		ProcessMovesRequest, 
		GetMovementOptionsResponse, 
		GetAttackOptionsRequest, 
		CreateGameRequest, 
		UpdateGameRequest, 
		GetGameStateResponse, 
		CanSelectUnitResponse
} from '../../gen/weewar/v1/games_pb';
import {
		ListUsersResponse, 
		GetUserResponse, 
		DeleteUserRequest, 
		GetUsersRequest, 
		GetUsersResponse, 
		ListUsersRequest, 
		GetUserRequest, 
		DeleteUserResponse, 
		UpdateUserRequest, 
		UpdateUserResponse, 
		CreateUserRequest, 
		CreateUserResponse
} from '../../gen/weewar/v1/users_pb';
import {
		CreateWorldRequest, 
		GetWorldsResponse, 
		ListWorldsRequest, 
		ListWorldsResponse, 
		GetWorldRequest, 
		DeleteWorldRequest, 
		UpdateWorldRequest, 
		UpdateWorldResponse, 
		CreateWorldResponse, 
		GetWorldsRequest, 
		GetWorldResponse, 
		DeleteWorldResponse
} from '../../gen/weewar/v1/worlds_pb';

/**
 * WASM Response interface for all service calls
 */
export interface WASMResponse<T = any> {
    success: boolean;
    message: string;
    data: T;
}

/**
 * Error class for WASM-specific errors
 */
export class WasmError extends Error {
    constructor(message: string, public readonly methodPath?: string) {
        super(message);
        this.name = 'WasmError';
    }
}
/**
 * GamesService service client interface
 */
export interface GamesServiceMethods {
	createGame(request: CreateGameRequest): Promise<CreateGameResponse>;
	getGames(request: GetGamesRequest): Promise<GetGamesResponse>;
	listGames(request: ListGamesRequest): Promise<ListGamesResponse>;
	getGame(request: GetGameRequest): Promise<GetGameResponse>;
	deleteGame(request: DeleteGameRequest): Promise<DeleteGameResponse>;
	updateGame(request: UpdateGameRequest): Promise<UpdateGameResponse>;
	getGameState(request: GetGameStateRequest): Promise<GetGameStateResponse>;
	listMoves(request: ListMovesRequest): Promise<ListMovesResponse>;
	processMoves(request: ProcessMovesRequest): Promise<ProcessMovesResponse>;
	getMovementOptions(request: GetMovementOptionsRequest): Promise<GetMovementOptionsResponse>;
	getAttackOptions(request: GetAttackOptionsRequest): Promise<GetAttackOptionsResponse>;
	canSelectUnit(request: CanSelectUnitRequest): Promise<CanSelectUnitResponse>;
}
/**
 * UsersService service client interface
 */
export interface UsersServiceMethods {
	createUser(request: CreateUserRequest): Promise<CreateUserResponse>;
	getUsers(request: GetUsersRequest): Promise<GetUsersResponse>;
	listUsers(request: ListUsersRequest): Promise<ListUsersResponse>;
	getUser(request: GetUserRequest): Promise<GetUserResponse>;
	deleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
	updateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
}
/**
 * WorldsService service client interface
 */
export interface WorldsServiceMethods {
	createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse>;
	getWorlds(request: GetWorldsRequest): Promise<GetWorldsResponse>;
	listWorlds(request: ListWorldsRequest): Promise<ListWorldsResponse>;
	getWorld(request: GetWorldRequest): Promise<GetWorldResponse>;
	deleteWorld(request: DeleteWorldRequest): Promise<DeleteWorldResponse>;
	updateWorld(request: UpdateWorldRequest): Promise<UpdateWorldResponse>;
}

/**
 * weewar_v1_services WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class Weewar_v1_servicesClient {
    private wasm: any;
    private wasmLoadPromise: Promise<void> | null = null;

    // Service-specific clients
    public readonly gamesService: GamesServiceClientImpl;
    public readonly usersService: UsersServiceClientImpl;
    public readonly worldsService: WorldsServiceClientImpl;

    constructor() {
        this.gamesService = new GamesServiceClientImpl(this);
        this.usersService = new UsersServiceClientImpl(this);
        this.worldsService = new WorldsServiceClientImpl(this);
    }

    /**
     * Load the WASM module asynchronously
     */
    public async loadWasm(wasmPath: string = './weewar_v1_services.wasm'): Promise<void> {
        if (this.wasmLoadPromise) {
            return this.wasmLoadPromise;
        }

        this.wasmLoadPromise = this.loadWASMModule(wasmPath);
        return this.wasmLoadPromise;
    }

    /**
     * Check if WASM is ready for operations
     */
    public isReady(): boolean {
        return this.wasm !== null && this.wasm !== undefined;
    }

    /**
     * Wait for WASM to be ready (use during initialization)
     */
    public async waitUntilReady(): Promise<void> {
        if (!this.wasmLoadPromise) {
            throw new Error('WASM loading not started. Call loadWasm() first.');
        }
        await this.wasmLoadPromise;
    }

    /**
     * Internal method to call WASM functions with type conversion
     */
    public callMethod<TRequest, TResponse>(
        methodPath: string,
        request: TRequest
    ): Promise<TResponse> {
        this.ensureWASMLoaded();

        // Auto-detect conversion methods based on TS generator
        const toJson = this.detectToJson(request);
        const fromJson = this.detectFromJson((request as any).constructor);

        const jsonReq = toJson(request);
        const wasmMethod = this.getWasmMethod(methodPath);
        const wasmResponse = wasmMethod(JSON.stringify(jsonReq));

        if (!wasmResponse.success) {
            throw new WasmError(wasmResponse.message, methodPath);
        }

        return fromJson(wasmResponse.data);
    }

    /**
     * Load the WASM module implementation
     */
    private async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading weewar_v1_services WASM module...');

        // Check if WASM is already loaded (for testing environments)
        if ((window as any).weewar) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).weewar;
            return;
        }

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/static/wasm/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Verify WASM APIs are available
        if (!(window as any).weewar) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).weewar;

        console.log('weewar_v1_services WASM module loaded successfully');
    }

    /**
     * Ensure WASM module is loaded (synchronous version for service calls)
     */
    private ensureWASMLoaded(): void {
        if (!this.isReady()) {
            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');
        }
    }

    /**
     * Get WASM method function by path
     */
    private getWasmMethod(methodPath: string): Function {
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
    }

    /**
     * Auto-detect toJson conversion method
     */
    private detectToJson(request: any): (req: any) => any {
        return (request as any).toJson || 
               (request as any).toJSON || 
               ((r: any) => JSON.parse(JSON.stringify(r)));
    }

    /**
     * Auto-detect fromJson conversion method
     */
    private detectFromJson(constructor: any): (json: any) => any {
        return constructor.fromJson || 
               constructor.fromJSON || 
               ((j: any) => j);
    }
}
/**
 * GamesService service client implementation
 */
class GamesServiceClientImpl implements GamesServiceMethods {
    constructor(private parent: Weewar_v1_servicesClient) {}
    async createGame(request: CreateGameRequest): Promise<CreateGameResponse> {
        return this.parent.callMethod('gamesService.createGame', request);
    }
    async getGames(request: GetGamesRequest): Promise<GetGamesResponse> {
        return this.parent.callMethod('gamesService.getGames', request);
    }
    async listGames(request: ListGamesRequest): Promise<ListGamesResponse> {
        return this.parent.callMethod('gamesService.listGames', request);
    }
    async getGame(request: GetGameRequest): Promise<GetGameResponse> {
        return this.parent.callMethod('gamesService.getGame', request);
    }
    async deleteGame(request: DeleteGameRequest): Promise<DeleteGameResponse> {
        return this.parent.callMethod('gamesService.deleteGame', request);
    }
    async updateGame(request: UpdateGameRequest): Promise<UpdateGameResponse> {
        return this.parent.callMethod('gamesService.updateGame', request);
    }
    async getGameState(request: GetGameStateRequest): Promise<GetGameStateResponse> {
        return this.parent.callMethod('gamesService.getGameState', request);
    }
    async listMoves(request: ListMovesRequest): Promise<ListMovesResponse> {
        return this.parent.callMethod('gamesService.listMoves', request);
    }
    async processMoves(request: ProcessMovesRequest): Promise<ProcessMovesResponse> {
        return this.parent.callMethod('gamesService.processMoves', request);
    }
    async getMovementOptions(request: GetMovementOptionsRequest): Promise<GetMovementOptionsResponse> {
        return this.parent.callMethod('gamesService.getMovementOptions', request);
    }
    async getAttackOptions(request: GetAttackOptionsRequest): Promise<GetAttackOptionsResponse> {
        return this.parent.callMethod('gamesService.getAttackOptions', request);
    }
    async canSelectUnit(request: CanSelectUnitRequest): Promise<CanSelectUnitResponse> {
        return this.parent.callMethod('gamesService.canSelectUnit', request);
    }
}
/**
 * UsersService service client implementation
 */
class UsersServiceClientImpl implements UsersServiceMethods {
    constructor(private parent: Weewar_v1_servicesClient) {}
    async createUser(request: CreateUserRequest): Promise<CreateUserResponse> {
        return this.parent.callMethod('usersService.createUser', request);
    }
    async getUsers(request: GetUsersRequest): Promise<GetUsersResponse> {
        return this.parent.callMethod('usersService.getUsers', request);
    }
    async listUsers(request: ListUsersRequest): Promise<ListUsersResponse> {
        return this.parent.callMethod('usersService.listUsers', request);
    }
    async getUser(request: GetUserRequest): Promise<GetUserResponse> {
        return this.parent.callMethod('usersService.getUser', request);
    }
    async deleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse> {
        return this.parent.callMethod('usersService.deleteUser', request);
    }
    async updateUser(request: UpdateUserRequest): Promise<UpdateUserResponse> {
        return this.parent.callMethod('usersService.updateUser', request);
    }
}
/**
 * WorldsService service client implementation
 */
class WorldsServiceClientImpl implements WorldsServiceMethods {
    constructor(private parent: Weewar_v1_servicesClient) {}
    async createWorld(request: CreateWorldRequest): Promise<CreateWorldResponse> {
        return this.parent.callMethod('worldsService.createWorld', request);
    }
    async getWorlds(request: GetWorldsRequest): Promise<GetWorldsResponse> {
        return this.parent.callMethod('worldsService.getWorlds', request);
    }
    async listWorlds(request: ListWorldsRequest): Promise<ListWorldsResponse> {
        return this.parent.callMethod('worldsService.listWorlds', request);
    }
    async getWorld(request: GetWorldRequest): Promise<GetWorldResponse> {
        return this.parent.callMethod('worldsService.getWorld', request);
    }
    async deleteWorld(request: DeleteWorldRequest): Promise<DeleteWorldResponse> {
        return this.parent.callMethod('worldsService.deleteWorld', request);
    }
    async updateWorld(request: UpdateWorldRequest): Promise<UpdateWorldResponse> {
        return this.parent.callMethod('worldsService.updateWorld', request);
    }
}

// Export the main client class
export default Weewar_v1_servicesClient;