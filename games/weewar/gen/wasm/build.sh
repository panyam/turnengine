#!/bin/bash
# Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
# Build script for weewar_v1_services WASM module

set -e

echo "Building weewar_v1_services WASM module..."

# Check if Go is installed
if ! command -v go &> /dev/null; then
    echo "Error: Go is not installed or not in PATH"
    exit 1
fi

# Set WASM build environment
export GOOS=js
export GOARCH=wasm

# Build the WASM module
go build -o weewar_v1_services.wasm weewar_v1_services.wasm.go

# Copy wasm_exec.js from Go installation
GOROOT=$(go env GOROOT)
if [ -f "$GOROOT/misc/wasm/wasm_exec.js" ]; then
    cp "$GOROOT/misc/wasm/wasm_exec.js" .
    echo "Copied wasm_exec.js from Go installation"
else
    echo "Warning: wasm_exec.js not found in Go installation"
    echo "You may need to manually copy wasm_exec.js to this directory"
fi

echo "Build completed successfully!"
echo ""
echo "Generated files:"
echo "  - weewar_v1_services.wasm          (WASM binary)"
echo "  - wasm_exec.js                    (Go WASM runtime)"
echo ""
echo "To use in a web application:"
echo "1. Serve both files from your web server"
echo "2. Load wasm_exec.js before loading the WASM module"
echo "3. Use the generated TypeScript client to interact with the WASM module"
echo ""
echo "Example HTML:"
echo '<script src="wasm_exec.js"></script>'
echo '<script>'
echo '  const go = new Go();'
echo '  WebAssembly.instantiateStreaming(fetch("weewar_v1_services.wasm"), go.importObject)'
echo '    .then(result => go.run(result.instance));'
echo '</script>'