// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: weewar/v1/worlds.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorldsService_CreateWorld_FullMethodName = "/weewar.v1.WorldsService/CreateWorld"
	WorldsService_GetWorlds_FullMethodName   = "/weewar.v1.WorldsService/GetWorlds"
	WorldsService_ListWorlds_FullMethodName  = "/weewar.v1.WorldsService/ListWorlds"
	WorldsService_GetWorld_FullMethodName    = "/weewar.v1.WorldsService/GetWorld"
	WorldsService_DeleteWorld_FullMethodName = "/weewar.v1.WorldsService/DeleteWorld"
	WorldsService_UpdateWorld_FullMethodName = "/weewar.v1.WorldsService/UpdateWorld"
)

// WorldsServiceClient is the client API for WorldsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorldsService manages the world examples catalog
type WorldsServiceClient interface {
	// *
	// Create a new world
	CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error)
	// *
	// Batch get multiple worlds by ID
	GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error)
	// ListWorlds returns all available worlds
	ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error)
	// GetWorld returns a specific world with metadata
	GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error)
	// *
	// Delete a particular world
	DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error)
	// GetWorld returns a specific world with metadata
	UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*UpdateWorldResponse, error)
}

type worldsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldsServiceClient(cc grpc.ClientConnInterface) WorldsServiceClient {
	return &worldsServiceClient{cc}
}

func (c *worldsServiceClient) CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorldResponse)
	err := c.cc.Invoke(ctx, WorldsService_CreateWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsServiceClient) GetWorlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorldsResponse)
	err := c.cc.Invoke(ctx, WorldsService_GetWorlds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsServiceClient) ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorldsResponse)
	err := c.cc.Invoke(ctx, WorldsService_ListWorlds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsServiceClient) GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorldResponse)
	err := c.cc.Invoke(ctx, WorldsService_GetWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsServiceClient) DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorldResponse)
	err := c.cc.Invoke(ctx, WorldsService_DeleteWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldsServiceClient) UpdateWorld(ctx context.Context, in *UpdateWorldRequest, opts ...grpc.CallOption) (*UpdateWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorldResponse)
	err := c.cc.Invoke(ctx, WorldsService_UpdateWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldsServiceServer is the server API for WorldsService service.
// All implementations should embed UnimplementedWorldsServiceServer
// for forward compatibility.
//
// WorldsService manages the world examples catalog
type WorldsServiceServer interface {
	// *
	// Create a new world
	CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error)
	// *
	// Batch get multiple worlds by ID
	GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error)
	// ListWorlds returns all available worlds
	ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error)
	// GetWorld returns a specific world with metadata
	GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error)
	// *
	// Delete a particular world
	DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error)
	// GetWorld returns a specific world with metadata
	UpdateWorld(context.Context, *UpdateWorldRequest) (*UpdateWorldResponse, error)
}

// UnimplementedWorldsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorldsServiceServer struct{}

func (UnimplementedWorldsServiceServer) CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedWorldsServiceServer) GetWorlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorlds not implemented")
}
func (UnimplementedWorldsServiceServer) ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorlds not implemented")
}
func (UnimplementedWorldsServiceServer) GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedWorldsServiceServer) DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorld not implemented")
}
func (UnimplementedWorldsServiceServer) UpdateWorld(context.Context, *UpdateWorldRequest) (*UpdateWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorld not implemented")
}
func (UnimplementedWorldsServiceServer) testEmbeddedByValue() {}

// UnsafeWorldsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldsServiceServer will
// result in compilation errors.
type UnsafeWorldsServiceServer interface {
	mustEmbedUnimplementedWorldsServiceServer()
}

func RegisterWorldsServiceServer(s grpc.ServiceRegistrar, srv WorldsServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorldsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorldsService_ServiceDesc, srv)
}

func _WorldsService_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_CreateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).CreateWorld(ctx, req.(*CreateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldsService_GetWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).GetWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_GetWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).GetWorlds(ctx, req.(*GetWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldsService_ListWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).ListWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_ListWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).ListWorlds(ctx, req.(*ListWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldsService_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_GetWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).GetWorld(ctx, req.(*GetWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldsService_DeleteWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).DeleteWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_DeleteWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).DeleteWorld(ctx, req.(*DeleteWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldsService_UpdateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldsServiceServer).UpdateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldsService_UpdateWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldsServiceServer).UpdateWorld(ctx, req.(*UpdateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldsService_ServiceDesc is the grpc.ServiceDesc for WorldsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weewar.v1.WorldsService",
	HandlerType: (*WorldsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorld",
			Handler:    _WorldsService_CreateWorld_Handler,
		},
		{
			MethodName: "GetWorlds",
			Handler:    _WorldsService_GetWorlds_Handler,
		},
		{
			MethodName: "ListWorlds",
			Handler:    _WorldsService_ListWorlds_Handler,
		},
		{
			MethodName: "GetWorld",
			Handler:    _WorldsService_GetWorld_Handler,
		},
		{
			MethodName: "DeleteWorld",
			Handler:    _WorldsService_DeleteWorld_Handler,
		},
		{
			MethodName: "UpdateWorld",
			Handler:    _WorldsService_UpdateWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weewar/v1/worlds.proto",
}
