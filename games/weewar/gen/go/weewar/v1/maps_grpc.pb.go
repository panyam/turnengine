// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: weewar/v1/maps.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MapsService_CreateMap_FullMethodName = "/weewar.v1.MapsService/CreateMap"
	MapsService_GetMaps_FullMethodName   = "/weewar.v1.MapsService/GetMaps"
	MapsService_ListMaps_FullMethodName  = "/weewar.v1.MapsService/ListMaps"
	MapsService_GetMap_FullMethodName    = "/weewar.v1.MapsService/GetMap"
	MapsService_DeleteMap_FullMethodName = "/weewar.v1.MapsService/DeleteMap"
	MapsService_UpdateMap_FullMethodName = "/weewar.v1.MapsService/UpdateMap"
)

// MapsServiceClient is the client API for MapsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MapsService manages the map examples catalog
type MapsServiceClient interface {
	// *
	// Create a new map
	CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*CreateMapResponse, error)
	// *
	// Batch get multiple maps by ID
	GetMaps(ctx context.Context, in *GetMapsRequest, opts ...grpc.CallOption) (*GetMapsResponse, error)
	// ListMaps returns all available maps
	ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error)
	// GetMap returns a specific map with metadata
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error)
	// *
	// Delete a particular map
	DeleteMap(ctx context.Context, in *DeleteMapRequest, opts ...grpc.CallOption) (*DeleteMapResponse, error)
	// GetMap returns a specific map with metadata
	UpdateMap(ctx context.Context, in *UpdateMapRequest, opts ...grpc.CallOption) (*UpdateMapResponse, error)
}

type mapsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapsServiceClient(cc grpc.ClientConnInterface) MapsServiceClient {
	return &mapsServiceClient{cc}
}

func (c *mapsServiceClient) CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*CreateMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMapResponse)
	err := c.cc.Invoke(ctx, MapsService_CreateMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapsServiceClient) GetMaps(ctx context.Context, in *GetMapsRequest, opts ...grpc.CallOption) (*GetMapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapsResponse)
	err := c.cc.Invoke(ctx, MapsService_GetMaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapsServiceClient) ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMapsResponse)
	err := c.cc.Invoke(ctx, MapsService_ListMaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapsServiceClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapResponse)
	err := c.cc.Invoke(ctx, MapsService_GetMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapsServiceClient) DeleteMap(ctx context.Context, in *DeleteMapRequest, opts ...grpc.CallOption) (*DeleteMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMapResponse)
	err := c.cc.Invoke(ctx, MapsService_DeleteMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapsServiceClient) UpdateMap(ctx context.Context, in *UpdateMapRequest, opts ...grpc.CallOption) (*UpdateMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMapResponse)
	err := c.cc.Invoke(ctx, MapsService_UpdateMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapsServiceServer is the server API for MapsService service.
// All implementations should embed UnimplementedMapsServiceServer
// for forward compatibility.
//
// MapsService manages the map examples catalog
type MapsServiceServer interface {
	// *
	// Create a new map
	CreateMap(context.Context, *CreateMapRequest) (*CreateMapResponse, error)
	// *
	// Batch get multiple maps by ID
	GetMaps(context.Context, *GetMapsRequest) (*GetMapsResponse, error)
	// ListMaps returns all available maps
	ListMaps(context.Context, *ListMapsRequest) (*ListMapsResponse, error)
	// GetMap returns a specific map with metadata
	GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error)
	// *
	// Delete a particular map
	DeleteMap(context.Context, *DeleteMapRequest) (*DeleteMapResponse, error)
	// GetMap returns a specific map with metadata
	UpdateMap(context.Context, *UpdateMapRequest) (*UpdateMapResponse, error)
}

// UnimplementedMapsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapsServiceServer struct{}

func (UnimplementedMapsServiceServer) CreateMap(context.Context, *CreateMapRequest) (*CreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMap not implemented")
}
func (UnimplementedMapsServiceServer) GetMaps(context.Context, *GetMapsRequest) (*GetMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaps not implemented")
}
func (UnimplementedMapsServiceServer) ListMaps(context.Context, *ListMapsRequest) (*ListMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaps not implemented")
}
func (UnimplementedMapsServiceServer) GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedMapsServiceServer) DeleteMap(context.Context, *DeleteMapRequest) (*DeleteMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMap not implemented")
}
func (UnimplementedMapsServiceServer) UpdateMap(context.Context, *UpdateMapRequest) (*UpdateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMap not implemented")
}
func (UnimplementedMapsServiceServer) testEmbeddedByValue() {}

// UnsafeMapsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapsServiceServer will
// result in compilation errors.
type UnsafeMapsServiceServer interface {
	mustEmbedUnimplementedMapsServiceServer()
}

func RegisterMapsServiceServer(s grpc.ServiceRegistrar, srv MapsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMapsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MapsService_ServiceDesc, srv)
}

func _MapsService_CreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).CreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_CreateMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).CreateMap(ctx, req.(*CreateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapsService_GetMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).GetMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_GetMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).GetMaps(ctx, req.(*GetMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapsService_ListMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).ListMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_ListMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).ListMaps(ctx, req.(*ListMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapsService_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_GetMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).GetMap(ctx, req.(*GetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapsService_DeleteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).DeleteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_DeleteMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).DeleteMap(ctx, req.(*DeleteMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapsService_UpdateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).UpdateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapsService_UpdateMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).UpdateMap(ctx, req.(*UpdateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapsService_ServiceDesc is the grpc.ServiceDesc for MapsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weewar.v1.MapsService",
	HandlerType: (*MapsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMap",
			Handler:    _MapsService_CreateMap_Handler,
		},
		{
			MethodName: "GetMaps",
			Handler:    _MapsService_GetMaps_Handler,
		},
		{
			MethodName: "ListMaps",
			Handler:    _MapsService_ListMaps_Handler,
		},
		{
			MethodName: "GetMap",
			Handler:    _MapsService_GetMap_Handler,
		},
		{
			MethodName: "DeleteMap",
			Handler:    _MapsService_DeleteMap_Handler,
		},
		{
			MethodName: "UpdateMap",
			Handler:    _MapsService_UpdateMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weewar/v1/maps.proto",
}
