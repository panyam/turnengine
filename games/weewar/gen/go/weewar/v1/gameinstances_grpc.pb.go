// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: weewar/v1/gameinstances.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameInstancesService_CreateGameInstance_FullMethodName = "/weewar.v1.GameInstancesService/CreateGameInstance"
	GameInstancesService_GetGameInstances_FullMethodName   = "/weewar.v1.GameInstancesService/GetGameInstances"
	GameInstancesService_ListGameInstances_FullMethodName  = "/weewar.v1.GameInstancesService/ListGameInstances"
	GameInstancesService_GetGameInstance_FullMethodName    = "/weewar.v1.GameInstancesService/GetGameInstance"
	GameInstancesService_DeleteGameInstance_FullMethodName = "/weewar.v1.GameInstancesService/DeleteGameInstance"
	GameInstancesService_UpdateGameInstance_FullMethodName = "/weewar.v1.GameInstancesService/UpdateGameInstance"
)

// GameInstancesServiceClient is the client API for GameInstancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GameInstancesService manages the gameinstance examples catalog
type GameInstancesServiceClient interface {
	// *
	// Create a new gameinstance
	CreateGameInstance(ctx context.Context, in *CreateGameInstanceRequest, opts ...grpc.CallOption) (*CreateGameInstanceResponse, error)
	// *
	// Batch get multiple gameinstances by ID
	GetGameInstances(ctx context.Context, in *GetGameInstancesRequest, opts ...grpc.CallOption) (*GetGameInstancesResponse, error)
	// ListGameInstances returns all available gameinstances
	ListGameInstances(ctx context.Context, in *ListGameInstancesRequest, opts ...grpc.CallOption) (*ListGameInstancesResponse, error)
	// GetGameInstance returns a specific gameinstance with metadata
	GetGameInstance(ctx context.Context, in *GetGameInstanceRequest, opts ...grpc.CallOption) (*GetGameInstanceResponse, error)
	// *
	// Delete a particular gameinstance
	DeleteGameInstance(ctx context.Context, in *DeleteGameInstanceRequest, opts ...grpc.CallOption) (*DeleteGameInstanceResponse, error)
	// GetGameInstance returns a specific gameinstance with metadata
	UpdateGameInstance(ctx context.Context, in *UpdateGameInstanceRequest, opts ...grpc.CallOption) (*UpdateGameInstanceResponse, error)
}

type gameInstancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameInstancesServiceClient(cc grpc.ClientConnInterface) GameInstancesServiceClient {
	return &gameInstancesServiceClient{cc}
}

func (c *gameInstancesServiceClient) CreateGameInstance(ctx context.Context, in *CreateGameInstanceRequest, opts ...grpc.CallOption) (*CreateGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameInstanceResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_CreateGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInstancesServiceClient) GetGameInstances(ctx context.Context, in *GetGameInstancesRequest, opts ...grpc.CallOption) (*GetGameInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameInstancesResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_GetGameInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInstancesServiceClient) ListGameInstances(ctx context.Context, in *ListGameInstancesRequest, opts ...grpc.CallOption) (*ListGameInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameInstancesResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_ListGameInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInstancesServiceClient) GetGameInstance(ctx context.Context, in *GetGameInstanceRequest, opts ...grpc.CallOption) (*GetGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameInstanceResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_GetGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInstancesServiceClient) DeleteGameInstance(ctx context.Context, in *DeleteGameInstanceRequest, opts ...grpc.CallOption) (*DeleteGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGameInstanceResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_DeleteGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameInstancesServiceClient) UpdateGameInstance(ctx context.Context, in *UpdateGameInstanceRequest, opts ...grpc.CallOption) (*UpdateGameInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGameInstanceResponse)
	err := c.cc.Invoke(ctx, GameInstancesService_UpdateGameInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameInstancesServiceServer is the server API for GameInstancesService service.
// All implementations should embed UnimplementedGameInstancesServiceServer
// for forward compatibility.
//
// GameInstancesService manages the gameinstance examples catalog
type GameInstancesServiceServer interface {
	// *
	// Create a new gameinstance
	CreateGameInstance(context.Context, *CreateGameInstanceRequest) (*CreateGameInstanceResponse, error)
	// *
	// Batch get multiple gameinstances by ID
	GetGameInstances(context.Context, *GetGameInstancesRequest) (*GetGameInstancesResponse, error)
	// ListGameInstances returns all available gameinstances
	ListGameInstances(context.Context, *ListGameInstancesRequest) (*ListGameInstancesResponse, error)
	// GetGameInstance returns a specific gameinstance with metadata
	GetGameInstance(context.Context, *GetGameInstanceRequest) (*GetGameInstanceResponse, error)
	// *
	// Delete a particular gameinstance
	DeleteGameInstance(context.Context, *DeleteGameInstanceRequest) (*DeleteGameInstanceResponse, error)
	// GetGameInstance returns a specific gameinstance with metadata
	UpdateGameInstance(context.Context, *UpdateGameInstanceRequest) (*UpdateGameInstanceResponse, error)
}

// UnimplementedGameInstancesServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameInstancesServiceServer struct{}

func (UnimplementedGameInstancesServiceServer) CreateGameInstance(context.Context, *CreateGameInstanceRequest) (*CreateGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameInstance not implemented")
}
func (UnimplementedGameInstancesServiceServer) GetGameInstances(context.Context, *GetGameInstancesRequest) (*GetGameInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameInstances not implemented")
}
func (UnimplementedGameInstancesServiceServer) ListGameInstances(context.Context, *ListGameInstancesRequest) (*ListGameInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameInstances not implemented")
}
func (UnimplementedGameInstancesServiceServer) GetGameInstance(context.Context, *GetGameInstanceRequest) (*GetGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameInstance not implemented")
}
func (UnimplementedGameInstancesServiceServer) DeleteGameInstance(context.Context, *DeleteGameInstanceRequest) (*DeleteGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameInstance not implemented")
}
func (UnimplementedGameInstancesServiceServer) UpdateGameInstance(context.Context, *UpdateGameInstanceRequest) (*UpdateGameInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameInstance not implemented")
}
func (UnimplementedGameInstancesServiceServer) testEmbeddedByValue() {}

// UnsafeGameInstancesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameInstancesServiceServer will
// result in compilation errors.
type UnsafeGameInstancesServiceServer interface {
	mustEmbedUnimplementedGameInstancesServiceServer()
}

func RegisterGameInstancesServiceServer(s grpc.ServiceRegistrar, srv GameInstancesServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameInstancesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameInstancesService_ServiceDesc, srv)
}

func _GameInstancesService_CreateGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).CreateGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_CreateGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).CreateGameInstance(ctx, req.(*CreateGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInstancesService_GetGameInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).GetGameInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_GetGameInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).GetGameInstances(ctx, req.(*GetGameInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInstancesService_ListGameInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).ListGameInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_ListGameInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).ListGameInstances(ctx, req.(*ListGameInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInstancesService_GetGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).GetGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_GetGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).GetGameInstance(ctx, req.(*GetGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInstancesService_DeleteGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).DeleteGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_DeleteGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).DeleteGameInstance(ctx, req.(*DeleteGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameInstancesService_UpdateGameInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInstancesServiceServer).UpdateGameInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameInstancesService_UpdateGameInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInstancesServiceServer).UpdateGameInstance(ctx, req.(*UpdateGameInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameInstancesService_ServiceDesc is the grpc.ServiceDesc for GameInstancesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameInstancesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weewar.v1.GameInstancesService",
	HandlerType: (*GameInstancesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGameInstance",
			Handler:    _GameInstancesService_CreateGameInstance_Handler,
		},
		{
			MethodName: "GetGameInstances",
			Handler:    _GameInstancesService_GetGameInstances_Handler,
		},
		{
			MethodName: "ListGameInstances",
			Handler:    _GameInstancesService_ListGameInstances_Handler,
		},
		{
			MethodName: "GetGameInstance",
			Handler:    _GameInstancesService_GetGameInstance_Handler,
		},
		{
			MethodName: "DeleteGameInstance",
			Handler:    _GameInstancesService_DeleteGameInstance_Handler,
		},
		{
			MethodName: "UpdateGameInstance",
			Handler:    _GameInstancesService_UpdateGameInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weewar/v1/gameinstances.proto",
}
