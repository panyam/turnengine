// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weewar/v1/worlds.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorldsServiceName is the fully-qualified name of the WorldsService service.
	WorldsServiceName = "weewar.v1.WorldsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorldsServiceCreateWorldProcedure is the fully-qualified name of the WorldsService's CreateWorld
	// RPC.
	WorldsServiceCreateWorldProcedure = "/weewar.v1.WorldsService/CreateWorld"
	// WorldsServiceGetWorldsProcedure is the fully-qualified name of the WorldsService's GetWorlds RPC.
	WorldsServiceGetWorldsProcedure = "/weewar.v1.WorldsService/GetWorlds"
	// WorldsServiceListWorldsProcedure is the fully-qualified name of the WorldsService's ListWorlds
	// RPC.
	WorldsServiceListWorldsProcedure = "/weewar.v1.WorldsService/ListWorlds"
	// WorldsServiceGetWorldProcedure is the fully-qualified name of the WorldsService's GetWorld RPC.
	WorldsServiceGetWorldProcedure = "/weewar.v1.WorldsService/GetWorld"
	// WorldsServiceDeleteWorldProcedure is the fully-qualified name of the WorldsService's DeleteWorld
	// RPC.
	WorldsServiceDeleteWorldProcedure = "/weewar.v1.WorldsService/DeleteWorld"
	// WorldsServiceUpdateWorldProcedure is the fully-qualified name of the WorldsService's UpdateWorld
	// RPC.
	WorldsServiceUpdateWorldProcedure = "/weewar.v1.WorldsService/UpdateWorld"
)

// WorldsServiceClient is a client for the weewar.v1.WorldsService service.
type WorldsServiceClient interface {
	// *
	// Create a new world
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.CreateWorldResponse], error)
	// *
	// Batch get multiple worlds by ID
	GetWorlds(context.Context, *connect.Request[v1.GetWorldsRequest]) (*connect.Response[v1.GetWorldsResponse], error)
	// ListWorlds returns all available worlds
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
	// GetWorld returns a specific world with metadata
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	// *
	// Delete a particular world
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteWorldResponse], error)
	// GetWorld returns a specific world with metadata
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.UpdateWorldResponse], error)
}

// NewWorldsServiceClient constructs a client for the weewar.v1.WorldsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorldsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorldsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worldsServiceMethods := v1.File_weewar_v1_worlds_proto.Services().ByName("WorldsService").Methods()
	return &worldsServiceClient{
		createWorld: connect.NewClient[v1.CreateWorldRequest, v1.CreateWorldResponse](
			httpClient,
			baseURL+WorldsServiceCreateWorldProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("CreateWorld")),
			connect.WithClientOptions(opts...),
		),
		getWorlds: connect.NewClient[v1.GetWorldsRequest, v1.GetWorldsResponse](
			httpClient,
			baseURL+WorldsServiceGetWorldsProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("GetWorlds")),
			connect.WithClientOptions(opts...),
		),
		listWorlds: connect.NewClient[v1.ListWorldsRequest, v1.ListWorldsResponse](
			httpClient,
			baseURL+WorldsServiceListWorldsProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("ListWorlds")),
			connect.WithClientOptions(opts...),
		),
		getWorld: connect.NewClient[v1.GetWorldRequest, v1.GetWorldResponse](
			httpClient,
			baseURL+WorldsServiceGetWorldProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("GetWorld")),
			connect.WithClientOptions(opts...),
		),
		deleteWorld: connect.NewClient[v1.DeleteWorldRequest, v1.DeleteWorldResponse](
			httpClient,
			baseURL+WorldsServiceDeleteWorldProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("DeleteWorld")),
			connect.WithClientOptions(opts...),
		),
		updateWorld: connect.NewClient[v1.UpdateWorldRequest, v1.UpdateWorldResponse](
			httpClient,
			baseURL+WorldsServiceUpdateWorldProcedure,
			connect.WithSchema(worldsServiceMethods.ByName("UpdateWorld")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worldsServiceClient implements WorldsServiceClient.
type worldsServiceClient struct {
	createWorld *connect.Client[v1.CreateWorldRequest, v1.CreateWorldResponse]
	getWorlds   *connect.Client[v1.GetWorldsRequest, v1.GetWorldsResponse]
	listWorlds  *connect.Client[v1.ListWorldsRequest, v1.ListWorldsResponse]
	getWorld    *connect.Client[v1.GetWorldRequest, v1.GetWorldResponse]
	deleteWorld *connect.Client[v1.DeleteWorldRequest, v1.DeleteWorldResponse]
	updateWorld *connect.Client[v1.UpdateWorldRequest, v1.UpdateWorldResponse]
}

// CreateWorld calls weewar.v1.WorldsService.CreateWorld.
func (c *worldsServiceClient) CreateWorld(ctx context.Context, req *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.CreateWorldResponse], error) {
	return c.createWorld.CallUnary(ctx, req)
}

// GetWorlds calls weewar.v1.WorldsService.GetWorlds.
func (c *worldsServiceClient) GetWorlds(ctx context.Context, req *connect.Request[v1.GetWorldsRequest]) (*connect.Response[v1.GetWorldsResponse], error) {
	return c.getWorlds.CallUnary(ctx, req)
}

// ListWorlds calls weewar.v1.WorldsService.ListWorlds.
func (c *worldsServiceClient) ListWorlds(ctx context.Context, req *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return c.listWorlds.CallUnary(ctx, req)
}

// GetWorld calls weewar.v1.WorldsService.GetWorld.
func (c *worldsServiceClient) GetWorld(ctx context.Context, req *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return c.getWorld.CallUnary(ctx, req)
}

// DeleteWorld calls weewar.v1.WorldsService.DeleteWorld.
func (c *worldsServiceClient) DeleteWorld(ctx context.Context, req *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteWorldResponse], error) {
	return c.deleteWorld.CallUnary(ctx, req)
}

// UpdateWorld calls weewar.v1.WorldsService.UpdateWorld.
func (c *worldsServiceClient) UpdateWorld(ctx context.Context, req *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.UpdateWorldResponse], error) {
	return c.updateWorld.CallUnary(ctx, req)
}

// WorldsServiceHandler is an implementation of the weewar.v1.WorldsService service.
type WorldsServiceHandler interface {
	// *
	// Create a new world
	CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.CreateWorldResponse], error)
	// *
	// Batch get multiple worlds by ID
	GetWorlds(context.Context, *connect.Request[v1.GetWorldsRequest]) (*connect.Response[v1.GetWorldsResponse], error)
	// ListWorlds returns all available worlds
	ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error)
	// GetWorld returns a specific world with metadata
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	// *
	// Delete a particular world
	DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteWorldResponse], error)
	// GetWorld returns a specific world with metadata
	UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.UpdateWorldResponse], error)
}

// NewWorldsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorldsServiceHandler(svc WorldsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worldsServiceMethods := v1.File_weewar_v1_worlds_proto.Services().ByName("WorldsService").Methods()
	worldsServiceCreateWorldHandler := connect.NewUnaryHandler(
		WorldsServiceCreateWorldProcedure,
		svc.CreateWorld,
		connect.WithSchema(worldsServiceMethods.ByName("CreateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldsServiceGetWorldsHandler := connect.NewUnaryHandler(
		WorldsServiceGetWorldsProcedure,
		svc.GetWorlds,
		connect.WithSchema(worldsServiceMethods.ByName("GetWorlds")),
		connect.WithHandlerOptions(opts...),
	)
	worldsServiceListWorldsHandler := connect.NewUnaryHandler(
		WorldsServiceListWorldsProcedure,
		svc.ListWorlds,
		connect.WithSchema(worldsServiceMethods.ByName("ListWorlds")),
		connect.WithHandlerOptions(opts...),
	)
	worldsServiceGetWorldHandler := connect.NewUnaryHandler(
		WorldsServiceGetWorldProcedure,
		svc.GetWorld,
		connect.WithSchema(worldsServiceMethods.ByName("GetWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldsServiceDeleteWorldHandler := connect.NewUnaryHandler(
		WorldsServiceDeleteWorldProcedure,
		svc.DeleteWorld,
		connect.WithSchema(worldsServiceMethods.ByName("DeleteWorld")),
		connect.WithHandlerOptions(opts...),
	)
	worldsServiceUpdateWorldHandler := connect.NewUnaryHandler(
		WorldsServiceUpdateWorldProcedure,
		svc.UpdateWorld,
		connect.WithSchema(worldsServiceMethods.ByName("UpdateWorld")),
		connect.WithHandlerOptions(opts...),
	)
	return "/weewar.v1.WorldsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorldsServiceCreateWorldProcedure:
			worldsServiceCreateWorldHandler.ServeHTTP(w, r)
		case WorldsServiceGetWorldsProcedure:
			worldsServiceGetWorldsHandler.ServeHTTP(w, r)
		case WorldsServiceListWorldsProcedure:
			worldsServiceListWorldsHandler.ServeHTTP(w, r)
		case WorldsServiceGetWorldProcedure:
			worldsServiceGetWorldHandler.ServeHTTP(w, r)
		case WorldsServiceDeleteWorldProcedure:
			worldsServiceDeleteWorldHandler.ServeHTTP(w, r)
		case WorldsServiceUpdateWorldProcedure:
			worldsServiceUpdateWorldHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorldsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorldsServiceHandler struct{}

func (UnimplementedWorldsServiceHandler) CreateWorld(context.Context, *connect.Request[v1.CreateWorldRequest]) (*connect.Response[v1.CreateWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.CreateWorld is not implemented"))
}

func (UnimplementedWorldsServiceHandler) GetWorlds(context.Context, *connect.Request[v1.GetWorldsRequest]) (*connect.Response[v1.GetWorldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.GetWorlds is not implemented"))
}

func (UnimplementedWorldsServiceHandler) ListWorlds(context.Context, *connect.Request[v1.ListWorldsRequest]) (*connect.Response[v1.ListWorldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.ListWorlds is not implemented"))
}

func (UnimplementedWorldsServiceHandler) GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.GetWorld is not implemented"))
}

func (UnimplementedWorldsServiceHandler) DeleteWorld(context.Context, *connect.Request[v1.DeleteWorldRequest]) (*connect.Response[v1.DeleteWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.DeleteWorld is not implemented"))
}

func (UnimplementedWorldsServiceHandler) UpdateWorld(context.Context, *connect.Request[v1.UpdateWorldRequest]) (*connect.Response[v1.UpdateWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.WorldsService.UpdateWorld is not implemented"))
}
