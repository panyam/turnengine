// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weewar/v1/gameinstances.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameInstancesServiceName is the fully-qualified name of the GameInstancesService service.
	GameInstancesServiceName = "weewar.v1.GameInstancesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameInstancesServiceCreateGameInstanceProcedure is the fully-qualified name of the
	// GameInstancesService's CreateGameInstance RPC.
	GameInstancesServiceCreateGameInstanceProcedure = "/weewar.v1.GameInstancesService/CreateGameInstance"
	// GameInstancesServiceGetGameInstancesProcedure is the fully-qualified name of the
	// GameInstancesService's GetGameInstances RPC.
	GameInstancesServiceGetGameInstancesProcedure = "/weewar.v1.GameInstancesService/GetGameInstances"
	// GameInstancesServiceListGameInstancesProcedure is the fully-qualified name of the
	// GameInstancesService's ListGameInstances RPC.
	GameInstancesServiceListGameInstancesProcedure = "/weewar.v1.GameInstancesService/ListGameInstances"
	// GameInstancesServiceGetGameInstanceProcedure is the fully-qualified name of the
	// GameInstancesService's GetGameInstance RPC.
	GameInstancesServiceGetGameInstanceProcedure = "/weewar.v1.GameInstancesService/GetGameInstance"
	// GameInstancesServiceDeleteGameInstanceProcedure is the fully-qualified name of the
	// GameInstancesService's DeleteGameInstance RPC.
	GameInstancesServiceDeleteGameInstanceProcedure = "/weewar.v1.GameInstancesService/DeleteGameInstance"
	// GameInstancesServiceUpdateGameInstanceProcedure is the fully-qualified name of the
	// GameInstancesService's UpdateGameInstance RPC.
	GameInstancesServiceUpdateGameInstanceProcedure = "/weewar.v1.GameInstancesService/UpdateGameInstance"
)

// GameInstancesServiceClient is a client for the weewar.v1.GameInstancesService service.
type GameInstancesServiceClient interface {
	// *
	// Create a new gameinstance
	CreateGameInstance(context.Context, *connect.Request[v1.CreateGameInstanceRequest]) (*connect.Response[v1.CreateGameInstanceResponse], error)
	// *
	// Batch get multiple gameinstances by ID
	GetGameInstances(context.Context, *connect.Request[v1.GetGameInstancesRequest]) (*connect.Response[v1.GetGameInstancesResponse], error)
	// ListGameInstances returns all available gameinstances
	ListGameInstances(context.Context, *connect.Request[v1.ListGameInstancesRequest]) (*connect.Response[v1.ListGameInstancesResponse], error)
	// GetGameInstance returns a specific gameinstance with metadata
	GetGameInstance(context.Context, *connect.Request[v1.GetGameInstanceRequest]) (*connect.Response[v1.GetGameInstanceResponse], error)
	// *
	// Delete a particular gameinstance
	DeleteGameInstance(context.Context, *connect.Request[v1.DeleteGameInstanceRequest]) (*connect.Response[v1.DeleteGameInstanceResponse], error)
	// GetGameInstance returns a specific gameinstance with metadata
	UpdateGameInstance(context.Context, *connect.Request[v1.UpdateGameInstanceRequest]) (*connect.Response[v1.UpdateGameInstanceResponse], error)
}

// NewGameInstancesServiceClient constructs a client for the weewar.v1.GameInstancesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameInstancesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameInstancesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gameInstancesServiceMethods := v1.File_weewar_v1_gameinstances_proto.Services().ByName("GameInstancesService").Methods()
	return &gameInstancesServiceClient{
		createGameInstance: connect.NewClient[v1.CreateGameInstanceRequest, v1.CreateGameInstanceResponse](
			httpClient,
			baseURL+GameInstancesServiceCreateGameInstanceProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("CreateGameInstance")),
			connect.WithClientOptions(opts...),
		),
		getGameInstances: connect.NewClient[v1.GetGameInstancesRequest, v1.GetGameInstancesResponse](
			httpClient,
			baseURL+GameInstancesServiceGetGameInstancesProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("GetGameInstances")),
			connect.WithClientOptions(opts...),
		),
		listGameInstances: connect.NewClient[v1.ListGameInstancesRequest, v1.ListGameInstancesResponse](
			httpClient,
			baseURL+GameInstancesServiceListGameInstancesProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("ListGameInstances")),
			connect.WithClientOptions(opts...),
		),
		getGameInstance: connect.NewClient[v1.GetGameInstanceRequest, v1.GetGameInstanceResponse](
			httpClient,
			baseURL+GameInstancesServiceGetGameInstanceProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("GetGameInstance")),
			connect.WithClientOptions(opts...),
		),
		deleteGameInstance: connect.NewClient[v1.DeleteGameInstanceRequest, v1.DeleteGameInstanceResponse](
			httpClient,
			baseURL+GameInstancesServiceDeleteGameInstanceProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("DeleteGameInstance")),
			connect.WithClientOptions(opts...),
		),
		updateGameInstance: connect.NewClient[v1.UpdateGameInstanceRequest, v1.UpdateGameInstanceResponse](
			httpClient,
			baseURL+GameInstancesServiceUpdateGameInstanceProcedure,
			connect.WithSchema(gameInstancesServiceMethods.ByName("UpdateGameInstance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameInstancesServiceClient implements GameInstancesServiceClient.
type gameInstancesServiceClient struct {
	createGameInstance *connect.Client[v1.CreateGameInstanceRequest, v1.CreateGameInstanceResponse]
	getGameInstances   *connect.Client[v1.GetGameInstancesRequest, v1.GetGameInstancesResponse]
	listGameInstances  *connect.Client[v1.ListGameInstancesRequest, v1.ListGameInstancesResponse]
	getGameInstance    *connect.Client[v1.GetGameInstanceRequest, v1.GetGameInstanceResponse]
	deleteGameInstance *connect.Client[v1.DeleteGameInstanceRequest, v1.DeleteGameInstanceResponse]
	updateGameInstance *connect.Client[v1.UpdateGameInstanceRequest, v1.UpdateGameInstanceResponse]
}

// CreateGameInstance calls weewar.v1.GameInstancesService.CreateGameInstance.
func (c *gameInstancesServiceClient) CreateGameInstance(ctx context.Context, req *connect.Request[v1.CreateGameInstanceRequest]) (*connect.Response[v1.CreateGameInstanceResponse], error) {
	return c.createGameInstance.CallUnary(ctx, req)
}

// GetGameInstances calls weewar.v1.GameInstancesService.GetGameInstances.
func (c *gameInstancesServiceClient) GetGameInstances(ctx context.Context, req *connect.Request[v1.GetGameInstancesRequest]) (*connect.Response[v1.GetGameInstancesResponse], error) {
	return c.getGameInstances.CallUnary(ctx, req)
}

// ListGameInstances calls weewar.v1.GameInstancesService.ListGameInstances.
func (c *gameInstancesServiceClient) ListGameInstances(ctx context.Context, req *connect.Request[v1.ListGameInstancesRequest]) (*connect.Response[v1.ListGameInstancesResponse], error) {
	return c.listGameInstances.CallUnary(ctx, req)
}

// GetGameInstance calls weewar.v1.GameInstancesService.GetGameInstance.
func (c *gameInstancesServiceClient) GetGameInstance(ctx context.Context, req *connect.Request[v1.GetGameInstanceRequest]) (*connect.Response[v1.GetGameInstanceResponse], error) {
	return c.getGameInstance.CallUnary(ctx, req)
}

// DeleteGameInstance calls weewar.v1.GameInstancesService.DeleteGameInstance.
func (c *gameInstancesServiceClient) DeleteGameInstance(ctx context.Context, req *connect.Request[v1.DeleteGameInstanceRequest]) (*connect.Response[v1.DeleteGameInstanceResponse], error) {
	return c.deleteGameInstance.CallUnary(ctx, req)
}

// UpdateGameInstance calls weewar.v1.GameInstancesService.UpdateGameInstance.
func (c *gameInstancesServiceClient) UpdateGameInstance(ctx context.Context, req *connect.Request[v1.UpdateGameInstanceRequest]) (*connect.Response[v1.UpdateGameInstanceResponse], error) {
	return c.updateGameInstance.CallUnary(ctx, req)
}

// GameInstancesServiceHandler is an implementation of the weewar.v1.GameInstancesService service.
type GameInstancesServiceHandler interface {
	// *
	// Create a new gameinstance
	CreateGameInstance(context.Context, *connect.Request[v1.CreateGameInstanceRequest]) (*connect.Response[v1.CreateGameInstanceResponse], error)
	// *
	// Batch get multiple gameinstances by ID
	GetGameInstances(context.Context, *connect.Request[v1.GetGameInstancesRequest]) (*connect.Response[v1.GetGameInstancesResponse], error)
	// ListGameInstances returns all available gameinstances
	ListGameInstances(context.Context, *connect.Request[v1.ListGameInstancesRequest]) (*connect.Response[v1.ListGameInstancesResponse], error)
	// GetGameInstance returns a specific gameinstance with metadata
	GetGameInstance(context.Context, *connect.Request[v1.GetGameInstanceRequest]) (*connect.Response[v1.GetGameInstanceResponse], error)
	// *
	// Delete a particular gameinstance
	DeleteGameInstance(context.Context, *connect.Request[v1.DeleteGameInstanceRequest]) (*connect.Response[v1.DeleteGameInstanceResponse], error)
	// GetGameInstance returns a specific gameinstance with metadata
	UpdateGameInstance(context.Context, *connect.Request[v1.UpdateGameInstanceRequest]) (*connect.Response[v1.UpdateGameInstanceResponse], error)
}

// NewGameInstancesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameInstancesServiceHandler(svc GameInstancesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameInstancesServiceMethods := v1.File_weewar_v1_gameinstances_proto.Services().ByName("GameInstancesService").Methods()
	gameInstancesServiceCreateGameInstanceHandler := connect.NewUnaryHandler(
		GameInstancesServiceCreateGameInstanceProcedure,
		svc.CreateGameInstance,
		connect.WithSchema(gameInstancesServiceMethods.ByName("CreateGameInstance")),
		connect.WithHandlerOptions(opts...),
	)
	gameInstancesServiceGetGameInstancesHandler := connect.NewUnaryHandler(
		GameInstancesServiceGetGameInstancesProcedure,
		svc.GetGameInstances,
		connect.WithSchema(gameInstancesServiceMethods.ByName("GetGameInstances")),
		connect.WithHandlerOptions(opts...),
	)
	gameInstancesServiceListGameInstancesHandler := connect.NewUnaryHandler(
		GameInstancesServiceListGameInstancesProcedure,
		svc.ListGameInstances,
		connect.WithSchema(gameInstancesServiceMethods.ByName("ListGameInstances")),
		connect.WithHandlerOptions(opts...),
	)
	gameInstancesServiceGetGameInstanceHandler := connect.NewUnaryHandler(
		GameInstancesServiceGetGameInstanceProcedure,
		svc.GetGameInstance,
		connect.WithSchema(gameInstancesServiceMethods.ByName("GetGameInstance")),
		connect.WithHandlerOptions(opts...),
	)
	gameInstancesServiceDeleteGameInstanceHandler := connect.NewUnaryHandler(
		GameInstancesServiceDeleteGameInstanceProcedure,
		svc.DeleteGameInstance,
		connect.WithSchema(gameInstancesServiceMethods.ByName("DeleteGameInstance")),
		connect.WithHandlerOptions(opts...),
	)
	gameInstancesServiceUpdateGameInstanceHandler := connect.NewUnaryHandler(
		GameInstancesServiceUpdateGameInstanceProcedure,
		svc.UpdateGameInstance,
		connect.WithSchema(gameInstancesServiceMethods.ByName("UpdateGameInstance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/weewar.v1.GameInstancesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameInstancesServiceCreateGameInstanceProcedure:
			gameInstancesServiceCreateGameInstanceHandler.ServeHTTP(w, r)
		case GameInstancesServiceGetGameInstancesProcedure:
			gameInstancesServiceGetGameInstancesHandler.ServeHTTP(w, r)
		case GameInstancesServiceListGameInstancesProcedure:
			gameInstancesServiceListGameInstancesHandler.ServeHTTP(w, r)
		case GameInstancesServiceGetGameInstanceProcedure:
			gameInstancesServiceGetGameInstanceHandler.ServeHTTP(w, r)
		case GameInstancesServiceDeleteGameInstanceProcedure:
			gameInstancesServiceDeleteGameInstanceHandler.ServeHTTP(w, r)
		case GameInstancesServiceUpdateGameInstanceProcedure:
			gameInstancesServiceUpdateGameInstanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameInstancesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameInstancesServiceHandler struct{}

func (UnimplementedGameInstancesServiceHandler) CreateGameInstance(context.Context, *connect.Request[v1.CreateGameInstanceRequest]) (*connect.Response[v1.CreateGameInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.CreateGameInstance is not implemented"))
}

func (UnimplementedGameInstancesServiceHandler) GetGameInstances(context.Context, *connect.Request[v1.GetGameInstancesRequest]) (*connect.Response[v1.GetGameInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.GetGameInstances is not implemented"))
}

func (UnimplementedGameInstancesServiceHandler) ListGameInstances(context.Context, *connect.Request[v1.ListGameInstancesRequest]) (*connect.Response[v1.ListGameInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.ListGameInstances is not implemented"))
}

func (UnimplementedGameInstancesServiceHandler) GetGameInstance(context.Context, *connect.Request[v1.GetGameInstanceRequest]) (*connect.Response[v1.GetGameInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.GetGameInstance is not implemented"))
}

func (UnimplementedGameInstancesServiceHandler) DeleteGameInstance(context.Context, *connect.Request[v1.DeleteGameInstanceRequest]) (*connect.Response[v1.DeleteGameInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.DeleteGameInstance is not implemented"))
}

func (UnimplementedGameInstancesServiceHandler) UpdateGameInstance(context.Context, *connect.Request[v1.UpdateGameInstanceRequest]) (*connect.Response[v1.UpdateGameInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GameInstancesService.UpdateGameInstance is not implemented"))
}
