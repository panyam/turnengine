// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weewar/v1/maps.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MapsServiceName is the fully-qualified name of the MapsService service.
	MapsServiceName = "weewar.v1.MapsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MapsServiceCreateMapProcedure is the fully-qualified name of the MapsService's CreateMap RPC.
	MapsServiceCreateMapProcedure = "/weewar.v1.MapsService/CreateMap"
	// MapsServiceGetMapsProcedure is the fully-qualified name of the MapsService's GetMaps RPC.
	MapsServiceGetMapsProcedure = "/weewar.v1.MapsService/GetMaps"
	// MapsServiceListMapsProcedure is the fully-qualified name of the MapsService's ListMaps RPC.
	MapsServiceListMapsProcedure = "/weewar.v1.MapsService/ListMaps"
	// MapsServiceGetMapProcedure is the fully-qualified name of the MapsService's GetMap RPC.
	MapsServiceGetMapProcedure = "/weewar.v1.MapsService/GetMap"
	// MapsServiceDeleteMapProcedure is the fully-qualified name of the MapsService's DeleteMap RPC.
	MapsServiceDeleteMapProcedure = "/weewar.v1.MapsService/DeleteMap"
	// MapsServiceUpdateMapProcedure is the fully-qualified name of the MapsService's UpdateMap RPC.
	MapsServiceUpdateMapProcedure = "/weewar.v1.MapsService/UpdateMap"
)

// MapsServiceClient is a client for the weewar.v1.MapsService service.
type MapsServiceClient interface {
	// *
	// Create a new map
	CreateMap(context.Context, *connect.Request[v1.CreateMapRequest]) (*connect.Response[v1.CreateMapResponse], error)
	// *
	// Batch get multiple maps by ID
	GetMaps(context.Context, *connect.Request[v1.GetMapsRequest]) (*connect.Response[v1.GetMapsResponse], error)
	// ListMaps returns all available maps
	ListMaps(context.Context, *connect.Request[v1.ListMapsRequest]) (*connect.Response[v1.ListMapsResponse], error)
	// GetMap returns a specific map with metadata
	GetMap(context.Context, *connect.Request[v1.GetMapRequest]) (*connect.Response[v1.GetMapResponse], error)
	// *
	// Delete a particular map
	DeleteMap(context.Context, *connect.Request[v1.DeleteMapRequest]) (*connect.Response[v1.DeleteMapResponse], error)
	// GetMap returns a specific map with metadata
	UpdateMap(context.Context, *connect.Request[v1.UpdateMapRequest]) (*connect.Response[v1.UpdateMapResponse], error)
}

// NewMapsServiceClient constructs a client for the weewar.v1.MapsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMapsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MapsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mapsServiceMethods := v1.File_weewar_v1_maps_proto.Services().ByName("MapsService").Methods()
	return &mapsServiceClient{
		createMap: connect.NewClient[v1.CreateMapRequest, v1.CreateMapResponse](
			httpClient,
			baseURL+MapsServiceCreateMapProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("CreateMap")),
			connect.WithClientOptions(opts...),
		),
		getMaps: connect.NewClient[v1.GetMapsRequest, v1.GetMapsResponse](
			httpClient,
			baseURL+MapsServiceGetMapsProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("GetMaps")),
			connect.WithClientOptions(opts...),
		),
		listMaps: connect.NewClient[v1.ListMapsRequest, v1.ListMapsResponse](
			httpClient,
			baseURL+MapsServiceListMapsProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("ListMaps")),
			connect.WithClientOptions(opts...),
		),
		getMap: connect.NewClient[v1.GetMapRequest, v1.GetMapResponse](
			httpClient,
			baseURL+MapsServiceGetMapProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("GetMap")),
			connect.WithClientOptions(opts...),
		),
		deleteMap: connect.NewClient[v1.DeleteMapRequest, v1.DeleteMapResponse](
			httpClient,
			baseURL+MapsServiceDeleteMapProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("DeleteMap")),
			connect.WithClientOptions(opts...),
		),
		updateMap: connect.NewClient[v1.UpdateMapRequest, v1.UpdateMapResponse](
			httpClient,
			baseURL+MapsServiceUpdateMapProcedure,
			connect.WithSchema(mapsServiceMethods.ByName("UpdateMap")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mapsServiceClient implements MapsServiceClient.
type mapsServiceClient struct {
	createMap *connect.Client[v1.CreateMapRequest, v1.CreateMapResponse]
	getMaps   *connect.Client[v1.GetMapsRequest, v1.GetMapsResponse]
	listMaps  *connect.Client[v1.ListMapsRequest, v1.ListMapsResponse]
	getMap    *connect.Client[v1.GetMapRequest, v1.GetMapResponse]
	deleteMap *connect.Client[v1.DeleteMapRequest, v1.DeleteMapResponse]
	updateMap *connect.Client[v1.UpdateMapRequest, v1.UpdateMapResponse]
}

// CreateMap calls weewar.v1.MapsService.CreateMap.
func (c *mapsServiceClient) CreateMap(ctx context.Context, req *connect.Request[v1.CreateMapRequest]) (*connect.Response[v1.CreateMapResponse], error) {
	return c.createMap.CallUnary(ctx, req)
}

// GetMaps calls weewar.v1.MapsService.GetMaps.
func (c *mapsServiceClient) GetMaps(ctx context.Context, req *connect.Request[v1.GetMapsRequest]) (*connect.Response[v1.GetMapsResponse], error) {
	return c.getMaps.CallUnary(ctx, req)
}

// ListMaps calls weewar.v1.MapsService.ListMaps.
func (c *mapsServiceClient) ListMaps(ctx context.Context, req *connect.Request[v1.ListMapsRequest]) (*connect.Response[v1.ListMapsResponse], error) {
	return c.listMaps.CallUnary(ctx, req)
}

// GetMap calls weewar.v1.MapsService.GetMap.
func (c *mapsServiceClient) GetMap(ctx context.Context, req *connect.Request[v1.GetMapRequest]) (*connect.Response[v1.GetMapResponse], error) {
	return c.getMap.CallUnary(ctx, req)
}

// DeleteMap calls weewar.v1.MapsService.DeleteMap.
func (c *mapsServiceClient) DeleteMap(ctx context.Context, req *connect.Request[v1.DeleteMapRequest]) (*connect.Response[v1.DeleteMapResponse], error) {
	return c.deleteMap.CallUnary(ctx, req)
}

// UpdateMap calls weewar.v1.MapsService.UpdateMap.
func (c *mapsServiceClient) UpdateMap(ctx context.Context, req *connect.Request[v1.UpdateMapRequest]) (*connect.Response[v1.UpdateMapResponse], error) {
	return c.updateMap.CallUnary(ctx, req)
}

// MapsServiceHandler is an implementation of the weewar.v1.MapsService service.
type MapsServiceHandler interface {
	// *
	// Create a new map
	CreateMap(context.Context, *connect.Request[v1.CreateMapRequest]) (*connect.Response[v1.CreateMapResponse], error)
	// *
	// Batch get multiple maps by ID
	GetMaps(context.Context, *connect.Request[v1.GetMapsRequest]) (*connect.Response[v1.GetMapsResponse], error)
	// ListMaps returns all available maps
	ListMaps(context.Context, *connect.Request[v1.ListMapsRequest]) (*connect.Response[v1.ListMapsResponse], error)
	// GetMap returns a specific map with metadata
	GetMap(context.Context, *connect.Request[v1.GetMapRequest]) (*connect.Response[v1.GetMapResponse], error)
	// *
	// Delete a particular map
	DeleteMap(context.Context, *connect.Request[v1.DeleteMapRequest]) (*connect.Response[v1.DeleteMapResponse], error)
	// GetMap returns a specific map with metadata
	UpdateMap(context.Context, *connect.Request[v1.UpdateMapRequest]) (*connect.Response[v1.UpdateMapResponse], error)
}

// NewMapsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMapsServiceHandler(svc MapsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mapsServiceMethods := v1.File_weewar_v1_maps_proto.Services().ByName("MapsService").Methods()
	mapsServiceCreateMapHandler := connect.NewUnaryHandler(
		MapsServiceCreateMapProcedure,
		svc.CreateMap,
		connect.WithSchema(mapsServiceMethods.ByName("CreateMap")),
		connect.WithHandlerOptions(opts...),
	)
	mapsServiceGetMapsHandler := connect.NewUnaryHandler(
		MapsServiceGetMapsProcedure,
		svc.GetMaps,
		connect.WithSchema(mapsServiceMethods.ByName("GetMaps")),
		connect.WithHandlerOptions(opts...),
	)
	mapsServiceListMapsHandler := connect.NewUnaryHandler(
		MapsServiceListMapsProcedure,
		svc.ListMaps,
		connect.WithSchema(mapsServiceMethods.ByName("ListMaps")),
		connect.WithHandlerOptions(opts...),
	)
	mapsServiceGetMapHandler := connect.NewUnaryHandler(
		MapsServiceGetMapProcedure,
		svc.GetMap,
		connect.WithSchema(mapsServiceMethods.ByName("GetMap")),
		connect.WithHandlerOptions(opts...),
	)
	mapsServiceDeleteMapHandler := connect.NewUnaryHandler(
		MapsServiceDeleteMapProcedure,
		svc.DeleteMap,
		connect.WithSchema(mapsServiceMethods.ByName("DeleteMap")),
		connect.WithHandlerOptions(opts...),
	)
	mapsServiceUpdateMapHandler := connect.NewUnaryHandler(
		MapsServiceUpdateMapProcedure,
		svc.UpdateMap,
		connect.WithSchema(mapsServiceMethods.ByName("UpdateMap")),
		connect.WithHandlerOptions(opts...),
	)
	return "/weewar.v1.MapsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MapsServiceCreateMapProcedure:
			mapsServiceCreateMapHandler.ServeHTTP(w, r)
		case MapsServiceGetMapsProcedure:
			mapsServiceGetMapsHandler.ServeHTTP(w, r)
		case MapsServiceListMapsProcedure:
			mapsServiceListMapsHandler.ServeHTTP(w, r)
		case MapsServiceGetMapProcedure:
			mapsServiceGetMapHandler.ServeHTTP(w, r)
		case MapsServiceDeleteMapProcedure:
			mapsServiceDeleteMapHandler.ServeHTTP(w, r)
		case MapsServiceUpdateMapProcedure:
			mapsServiceUpdateMapHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMapsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMapsServiceHandler struct{}

func (UnimplementedMapsServiceHandler) CreateMap(context.Context, *connect.Request[v1.CreateMapRequest]) (*connect.Response[v1.CreateMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.CreateMap is not implemented"))
}

func (UnimplementedMapsServiceHandler) GetMaps(context.Context, *connect.Request[v1.GetMapsRequest]) (*connect.Response[v1.GetMapsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.GetMaps is not implemented"))
}

func (UnimplementedMapsServiceHandler) ListMaps(context.Context, *connect.Request[v1.ListMapsRequest]) (*connect.Response[v1.ListMapsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.ListMaps is not implemented"))
}

func (UnimplementedMapsServiceHandler) GetMap(context.Context, *connect.Request[v1.GetMapRequest]) (*connect.Response[v1.GetMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.GetMap is not implemented"))
}

func (UnimplementedMapsServiceHandler) DeleteMap(context.Context, *connect.Request[v1.DeleteMapRequest]) (*connect.Response[v1.DeleteMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.DeleteMap is not implemented"))
}

func (UnimplementedMapsServiceHandler) UpdateMap(context.Context, *connect.Request[v1.UpdateMapRequest]) (*connect.Response[v1.UpdateMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.MapsService.UpdateMap is not implemented"))
}
