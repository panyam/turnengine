// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: weewar/v1/games.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GamesServiceName is the fully-qualified name of the GamesService service.
	GamesServiceName = "weewar.v1.GamesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GamesServiceCreateGameProcedure is the fully-qualified name of the GamesService's CreateGame RPC.
	GamesServiceCreateGameProcedure = "/weewar.v1.GamesService/CreateGame"
	// GamesServiceGetGamesProcedure is the fully-qualified name of the GamesService's GetGames RPC.
	GamesServiceGetGamesProcedure = "/weewar.v1.GamesService/GetGames"
	// GamesServiceListGamesProcedure is the fully-qualified name of the GamesService's ListGames RPC.
	GamesServiceListGamesProcedure = "/weewar.v1.GamesService/ListGames"
	// GamesServiceGetGameProcedure is the fully-qualified name of the GamesService's GetGame RPC.
	GamesServiceGetGameProcedure = "/weewar.v1.GamesService/GetGame"
	// GamesServiceDeleteGameProcedure is the fully-qualified name of the GamesService's DeleteGame RPC.
	GamesServiceDeleteGameProcedure = "/weewar.v1.GamesService/DeleteGame"
	// GamesServiceUpdateGameProcedure is the fully-qualified name of the GamesService's UpdateGame RPC.
	GamesServiceUpdateGameProcedure = "/weewar.v1.GamesService/UpdateGame"
	// GamesServiceAddMovesToGameProcedure is the fully-qualified name of the GamesService's
	// AddMovesToGame RPC.
	GamesServiceAddMovesToGameProcedure = "/weewar.v1.GamesService/AddMovesToGame"
)

// GamesServiceClient is a client for the weewar.v1.GamesService service.
type GamesServiceClient interface {
	// *
	// Create a new game
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
	// *
	// Batch get multiple games by ID
	GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error)
	// ListGames returns all available games
	ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error)
	// GetGame returns a specific game with metadata
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	// *
	// Delete a particular game
	DeleteGame(context.Context, *connect.Request[v1.DeleteGameRequest]) (*connect.Response[v1.DeleteGameResponse], error)
	// GetGame returns a specific game with metadata
	UpdateGame(context.Context, *connect.Request[v1.UpdateGameRequest]) (*connect.Response[v1.UpdateGameResponse], error)
	// *
	// Add moves to an existing game
	AddMovesToGame(context.Context, *connect.Request[v1.AddMovesToGameRequest]) (*connect.Response[v1.AddMovesToGameResponse], error)
}

// NewGamesServiceClient constructs a client for the weewar.v1.GamesService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGamesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GamesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gamesServiceMethods := v1.File_weewar_v1_games_proto.Services().ByName("GamesService").Methods()
	return &gamesServiceClient{
		createGame: connect.NewClient[v1.CreateGameRequest, v1.CreateGameResponse](
			httpClient,
			baseURL+GamesServiceCreateGameProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("CreateGame")),
			connect.WithClientOptions(opts...),
		),
		getGames: connect.NewClient[v1.GetGamesRequest, v1.GetGamesResponse](
			httpClient,
			baseURL+GamesServiceGetGamesProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("GetGames")),
			connect.WithClientOptions(opts...),
		),
		listGames: connect.NewClient[v1.ListGamesRequest, v1.ListGamesResponse](
			httpClient,
			baseURL+GamesServiceListGamesProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("ListGames")),
			connect.WithClientOptions(opts...),
		),
		getGame: connect.NewClient[v1.GetGameRequest, v1.GetGameResponse](
			httpClient,
			baseURL+GamesServiceGetGameProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("GetGame")),
			connect.WithClientOptions(opts...),
		),
		deleteGame: connect.NewClient[v1.DeleteGameRequest, v1.DeleteGameResponse](
			httpClient,
			baseURL+GamesServiceDeleteGameProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("DeleteGame")),
			connect.WithClientOptions(opts...),
		),
		updateGame: connect.NewClient[v1.UpdateGameRequest, v1.UpdateGameResponse](
			httpClient,
			baseURL+GamesServiceUpdateGameProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("UpdateGame")),
			connect.WithClientOptions(opts...),
		),
		addMovesToGame: connect.NewClient[v1.AddMovesToGameRequest, v1.AddMovesToGameResponse](
			httpClient,
			baseURL+GamesServiceAddMovesToGameProcedure,
			connect.WithSchema(gamesServiceMethods.ByName("AddMovesToGame")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gamesServiceClient implements GamesServiceClient.
type gamesServiceClient struct {
	createGame     *connect.Client[v1.CreateGameRequest, v1.CreateGameResponse]
	getGames       *connect.Client[v1.GetGamesRequest, v1.GetGamesResponse]
	listGames      *connect.Client[v1.ListGamesRequest, v1.ListGamesResponse]
	getGame        *connect.Client[v1.GetGameRequest, v1.GetGameResponse]
	deleteGame     *connect.Client[v1.DeleteGameRequest, v1.DeleteGameResponse]
	updateGame     *connect.Client[v1.UpdateGameRequest, v1.UpdateGameResponse]
	addMovesToGame *connect.Client[v1.AddMovesToGameRequest, v1.AddMovesToGameResponse]
}

// CreateGame calls weewar.v1.GamesService.CreateGame.
func (c *gamesServiceClient) CreateGame(ctx context.Context, req *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// GetGames calls weewar.v1.GamesService.GetGames.
func (c *gamesServiceClient) GetGames(ctx context.Context, req *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error) {
	return c.getGames.CallUnary(ctx, req)
}

// ListGames calls weewar.v1.GamesService.ListGames.
func (c *gamesServiceClient) ListGames(ctx context.Context, req *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error) {
	return c.listGames.CallUnary(ctx, req)
}

// GetGame calls weewar.v1.GamesService.GetGame.
func (c *gamesServiceClient) GetGame(ctx context.Context, req *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return c.getGame.CallUnary(ctx, req)
}

// DeleteGame calls weewar.v1.GamesService.DeleteGame.
func (c *gamesServiceClient) DeleteGame(ctx context.Context, req *connect.Request[v1.DeleteGameRequest]) (*connect.Response[v1.DeleteGameResponse], error) {
	return c.deleteGame.CallUnary(ctx, req)
}

// UpdateGame calls weewar.v1.GamesService.UpdateGame.
func (c *gamesServiceClient) UpdateGame(ctx context.Context, req *connect.Request[v1.UpdateGameRequest]) (*connect.Response[v1.UpdateGameResponse], error) {
	return c.updateGame.CallUnary(ctx, req)
}

// AddMovesToGame calls weewar.v1.GamesService.AddMovesToGame.
func (c *gamesServiceClient) AddMovesToGame(ctx context.Context, req *connect.Request[v1.AddMovesToGameRequest]) (*connect.Response[v1.AddMovesToGameResponse], error) {
	return c.addMovesToGame.CallUnary(ctx, req)
}

// GamesServiceHandler is an implementation of the weewar.v1.GamesService service.
type GamesServiceHandler interface {
	// *
	// Create a new game
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
	// *
	// Batch get multiple games by ID
	GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error)
	// ListGames returns all available games
	ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error)
	// GetGame returns a specific game with metadata
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	// *
	// Delete a particular game
	DeleteGame(context.Context, *connect.Request[v1.DeleteGameRequest]) (*connect.Response[v1.DeleteGameResponse], error)
	// GetGame returns a specific game with metadata
	UpdateGame(context.Context, *connect.Request[v1.UpdateGameRequest]) (*connect.Response[v1.UpdateGameResponse], error)
	// *
	// Add moves to an existing game
	AddMovesToGame(context.Context, *connect.Request[v1.AddMovesToGameRequest]) (*connect.Response[v1.AddMovesToGameResponse], error)
}

// NewGamesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGamesServiceHandler(svc GamesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gamesServiceMethods := v1.File_weewar_v1_games_proto.Services().ByName("GamesService").Methods()
	gamesServiceCreateGameHandler := connect.NewUnaryHandler(
		GamesServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(gamesServiceMethods.ByName("CreateGame")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceGetGamesHandler := connect.NewUnaryHandler(
		GamesServiceGetGamesProcedure,
		svc.GetGames,
		connect.WithSchema(gamesServiceMethods.ByName("GetGames")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceListGamesHandler := connect.NewUnaryHandler(
		GamesServiceListGamesProcedure,
		svc.ListGames,
		connect.WithSchema(gamesServiceMethods.ByName("ListGames")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceGetGameHandler := connect.NewUnaryHandler(
		GamesServiceGetGameProcedure,
		svc.GetGame,
		connect.WithSchema(gamesServiceMethods.ByName("GetGame")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceDeleteGameHandler := connect.NewUnaryHandler(
		GamesServiceDeleteGameProcedure,
		svc.DeleteGame,
		connect.WithSchema(gamesServiceMethods.ByName("DeleteGame")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceUpdateGameHandler := connect.NewUnaryHandler(
		GamesServiceUpdateGameProcedure,
		svc.UpdateGame,
		connect.WithSchema(gamesServiceMethods.ByName("UpdateGame")),
		connect.WithHandlerOptions(opts...),
	)
	gamesServiceAddMovesToGameHandler := connect.NewUnaryHandler(
		GamesServiceAddMovesToGameProcedure,
		svc.AddMovesToGame,
		connect.WithSchema(gamesServiceMethods.ByName("AddMovesToGame")),
		connect.WithHandlerOptions(opts...),
	)
	return "/weewar.v1.GamesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GamesServiceCreateGameProcedure:
			gamesServiceCreateGameHandler.ServeHTTP(w, r)
		case GamesServiceGetGamesProcedure:
			gamesServiceGetGamesHandler.ServeHTTP(w, r)
		case GamesServiceListGamesProcedure:
			gamesServiceListGamesHandler.ServeHTTP(w, r)
		case GamesServiceGetGameProcedure:
			gamesServiceGetGameHandler.ServeHTTP(w, r)
		case GamesServiceDeleteGameProcedure:
			gamesServiceDeleteGameHandler.ServeHTTP(w, r)
		case GamesServiceUpdateGameProcedure:
			gamesServiceUpdateGameHandler.ServeHTTP(w, r)
		case GamesServiceAddMovesToGameProcedure:
			gamesServiceAddMovesToGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGamesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGamesServiceHandler struct{}

func (UnimplementedGamesServiceHandler) CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.CreateGame is not implemented"))
}

func (UnimplementedGamesServiceHandler) GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.GetGames is not implemented"))
}

func (UnimplementedGamesServiceHandler) ListGames(context.Context, *connect.Request[v1.ListGamesRequest]) (*connect.Response[v1.ListGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.ListGames is not implemented"))
}

func (UnimplementedGamesServiceHandler) GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.GetGame is not implemented"))
}

func (UnimplementedGamesServiceHandler) DeleteGame(context.Context, *connect.Request[v1.DeleteGameRequest]) (*connect.Response[v1.DeleteGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.DeleteGame is not implemented"))
}

func (UnimplementedGamesServiceHandler) UpdateGame(context.Context, *connect.Request[v1.UpdateGameRequest]) (*connect.Response[v1.UpdateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.UpdateGame is not implemented"))
}

func (UnimplementedGamesServiceHandler) AddMovesToGame(context.Context, *connect.Request[v1.AddMovesToGameRequest]) (*connect.Response[v1.AddMovesToGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("weewar.v1.GamesService.AddMovesToGame is not implemented"))
}
