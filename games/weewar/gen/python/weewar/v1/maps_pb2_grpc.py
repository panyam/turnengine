# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from weewar.v1 import maps_pb2 as weewar_dot_v1_dot_maps__pb2


class MapsServiceStub(object):
    """MapsService manages the map examples catalog
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMap = channel.unary_unary(
                '/weewar.v1.MapsService/CreateMap',
                request_serializer=weewar_dot_v1_dot_maps__pb2.CreateMapRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.CreateMapResponse.FromString,
                _registered_method=True)
        self.GetMaps = channel.unary_unary(
                '/weewar.v1.MapsService/GetMaps',
                request_serializer=weewar_dot_v1_dot_maps__pb2.GetMapsRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.GetMapsResponse.FromString,
                _registered_method=True)
        self.ListMaps = channel.unary_unary(
                '/weewar.v1.MapsService/ListMaps',
                request_serializer=weewar_dot_v1_dot_maps__pb2.ListMapsRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.ListMapsResponse.FromString,
                _registered_method=True)
        self.GetMap = channel.unary_unary(
                '/weewar.v1.MapsService/GetMap',
                request_serializer=weewar_dot_v1_dot_maps__pb2.GetMapRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.GetMapResponse.FromString,
                _registered_method=True)
        self.DeleteMap = channel.unary_unary(
                '/weewar.v1.MapsService/DeleteMap',
                request_serializer=weewar_dot_v1_dot_maps__pb2.DeleteMapRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.DeleteMapResponse.FromString,
                _registered_method=True)
        self.UpdateMap = channel.unary_unary(
                '/weewar.v1.MapsService/UpdateMap',
                request_serializer=weewar_dot_v1_dot_maps__pb2.UpdateMapRequest.SerializeToString,
                response_deserializer=weewar_dot_v1_dot_maps__pb2.UpdateMapResponse.FromString,
                _registered_method=True)


class MapsServiceServicer(object):
    """MapsService manages the map examples catalog
    """

    def CreateMap(self, request, context):
        """*
        Create a new map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMaps(self, request, context):
        """*
        Batch get multiple maps by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMaps(self, request, context):
        """ListMaps returns all available maps
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMap(self, request, context):
        """GetMap returns a specific map with metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMap(self, request, context):
        """*
        Delete a particular map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMap(self, request, context):
        """GetMap returns a specific map with metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMap,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.CreateMapRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.CreateMapResponse.SerializeToString,
            ),
            'GetMaps': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaps,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.GetMapsRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.GetMapsResponse.SerializeToString,
            ),
            'ListMaps': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMaps,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.ListMapsRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.ListMapsResponse.SerializeToString,
            ),
            'GetMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMap,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.GetMapRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.GetMapResponse.SerializeToString,
            ),
            'DeleteMap': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMap,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.DeleteMapRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.DeleteMapResponse.SerializeToString,
            ),
            'UpdateMap': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMap,
                    request_deserializer=weewar_dot_v1_dot_maps__pb2.UpdateMapRequest.FromString,
                    response_serializer=weewar_dot_v1_dot_maps__pb2.UpdateMapResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'weewar.v1.MapsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('weewar.v1.MapsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MapsService(object):
    """MapsService manages the map examples catalog
    """

    @staticmethod
    def CreateMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/CreateMap',
            weewar_dot_v1_dot_maps__pb2.CreateMapRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.CreateMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/GetMaps',
            weewar_dot_v1_dot_maps__pb2.GetMapsRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.GetMapsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/ListMaps',
            weewar_dot_v1_dot_maps__pb2.ListMapsRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.ListMapsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/GetMap',
            weewar_dot_v1_dot_maps__pb2.GetMapRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.GetMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/DeleteMap',
            weewar_dot_v1_dot_maps__pb2.DeleteMapRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.DeleteMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weewar.v1.MapsService/UpdateMap',
            weewar_dot_v1_dot_maps__pb2.UpdateMapRequest.SerializeToString,
            weewar_dot_v1_dot_maps__pb2.UpdateMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
