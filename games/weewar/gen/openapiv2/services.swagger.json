{
  "swagger": "2.0",
  "info": {
    "title": "weewar/v1/models.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GamesService"
    },
    {
      "name": "UsersService"
    },
    {
      "name": "WorldsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/games": {
      "get": {
        "summary": "ListGames returns all available games",
        "operationId": "GamesService_ListGames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageOffset",
            "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ownerId",
            "description": "May be filter by owner id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GamesService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new game",
        "operationId": "GamesService_CreateGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGameRequest"
            }
          }
        ],
        "tags": [
          "GamesService"
        ]
      }
    },
    "/v1/games/{game.id}": {
      "patch": {
        "summary": "GetGame returns a specific game with metadata",
        "operationId": "GamesService_UpdateGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "game.id",
            "description": "Unique ID for the game",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "game": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "creatorId": {
                      "type": "string",
                      "title": "User who started/created the game"
                    },
                    "worldId": {
                      "type": "string",
                      "title": "The world this game was created from"
                    },
                    "name": {
                      "type": "string",
                      "title": "Name if items have names"
                    },
                    "description": {
                      "type": "string",
                      "title": "Description if game has a description"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Some tags"
                    },
                    "imageUrl": {
                      "type": "string",
                      "title": "A possible image url"
                    },
                    "difficulty": {
                      "type": "string",
                      "title": "Difficulty - example attribute"
                    },
                    "config": {
                      "$ref": "#/definitions/v1GameConfiguration",
                      "title": "Game configuration"
                    }
                  },
                  "title": "*\nGame being updated"
                },
                "updateMask": {
                  "type": "string",
                  "description": "*\nMask of fields being updated in this Game to make partial changes."
                }
              },
              "title": "UpdateGameRequest"
            }
          }
        ],
        "tags": [
          "GamesService"
        ]
      }
    },
    "/v1/games/{gameId}/moves": {
      "post": {
        "operationId": "GamesService_ProcessMoves",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProcessMovesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "gameId",
            "description": "*\nGame ID to add moves to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "moves": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1GameMove"
                  },
                  "title": "*\nList of moves to add"
                }
              },
              "description": "*\nRequest to add moves to a game\nThe model is that a game in each \"tick\" can handle multiple moves (by possibly various players).\nIt is upto the move manager/processor in the game to ensure the \"transaction\" of moves is handled\natomically.\n\nFor example we may have 3 moves where first two units are moved to a common location\nand then they attack another unit.  Here If we treat it as a single unit attacking it\nwill have different outcomes than a \"combined\" attack."
            }
          }
        ],
        "tags": [
          "GamesService"
        ]
      }
    },
    "/v1/games/{id}": {
      "get": {
        "summary": "GetGame returns a specific game with metadata",
        "operationId": "GamesService_GetGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional, defaults to default_version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GamesService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular game",
        "operationId": "GamesService_DeleteGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the game to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "GamesService"
        ]
      }
    },
    "/v1/games:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple games by ID",
        "operationId": "GamesService_GetGames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the game to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "GamesService"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "summary": "ListUsers returns all available users",
        "operationId": "UsersService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageOffset",
            "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ownerId",
            "description": "May be filter by owner id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UsersService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new user",
        "operationId": "UsersService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UsersService"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "GetUser returns a specific user with metadata",
        "operationId": "UsersService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional, defaults to default_version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UsersService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular user",
        "operationId": "UsersService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the user to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UsersService"
        ]
      }
    },
    "/v1/users/{user.id}": {
      "patch": {
        "summary": "GetUser returns a specific user with metadata",
        "operationId": "UsersService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Unique ID for the user",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "name": {
                      "type": "string",
                      "title": "Name if items have names"
                    },
                    "description": {
                      "type": "string",
                      "title": "Description if user has a description"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Some tags"
                    },
                    "imageUrl": {
                      "type": "string",
                      "title": "A possible image url"
                    },
                    "difficulty": {
                      "type": "string",
                      "title": "Difficulty - example attribute"
                    }
                  },
                  "title": "*\nUser being updated"
                },
                "updateMask": {
                  "type": "string",
                  "description": "*\nMask of fields being updated in this User to make partial changes."
                }
              },
              "title": "UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "UsersService"
        ]
      }
    },
    "/v1/users:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple users by ID",
        "operationId": "UsersService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the user to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "UsersService"
        ]
      }
    },
    "/v1/worlds": {
      "get": {
        "summary": "ListWorlds returns all available worlds",
        "operationId": "WorldsService_ListWorlds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWorldsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageOffset",
            "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ownerId",
            "description": "May be filter by owner id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorldsService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new world",
        "operationId": "WorldsService_CreateWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateWorldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateWorldRequest"
            }
          }
        ],
        "tags": [
          "WorldsService"
        ]
      }
    },
    "/v1/worlds/{id}": {
      "get": {
        "summary": "GetWorld returns a specific world with metadata",
        "operationId": "WorldsService_GetWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional, defaults to default_version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorldsService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular world",
        "operationId": "WorldsService_DeleteWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteWorldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the world to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "WorldsService"
        ]
      }
    },
    "/v1/worlds/{world.id}": {
      "patch": {
        "summary": "GetWorld returns a specific world with metadata",
        "operationId": "WorldsService_UpdateWorld",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateWorldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "world.id",
            "description": "Unique ID for the world",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "world": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "creatorId": {
                      "type": "string",
                      "title": "User that created the world"
                    },
                    "name": {
                      "type": "string",
                      "title": "Name if items have names"
                    },
                    "description": {
                      "type": "string",
                      "title": "Description if world has a description"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Some tags"
                    },
                    "imageUrl": {
                      "type": "string",
                      "title": "A possible image url"
                    },
                    "difficulty": {
                      "type": "string",
                      "title": "Difficulty - example attribute"
                    },
                    "tiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/v1Tile"
                      },
                      "title": "JSON-fied tile data about what units and terrains are at each location"
                    },
                    "units": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/v1Unit"
                      },
                      "title": "All units on the world and who they belong to"
                    }
                  },
                  "title": "*\nWorld being updated"
                },
                "updateMask": {
                  "type": "string",
                  "description": "*\nMask of fields being updated in this World to make partial changes."
                }
              },
              "title": "UpdateWorldRequest"
            }
          }
        ],
        "tags": [
          "WorldsService"
        ]
      }
    },
    "/v1/worlds:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple worlds by ID",
        "operationId": "WorldsService_GetWorlds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorldsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the world to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WorldsService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AttackUnitAction": {
      "type": "object",
      "properties": {
        "attackerQ": {
          "type": "integer",
          "format": "int32"
        },
        "attackerR": {
          "type": "integer",
          "format": "int32"
        },
        "defenderQ": {
          "type": "integer",
          "format": "int32"
        },
        "defenderR": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nAttack with one unit against another"
    },
    "v1CreateGameRequest": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/v1Game",
          "title": "*\nGame being updated"
        }
      },
      "title": "*\nGame creation request object"
    },
    "v1CreateGameResponse": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/v1Game",
          "title": "*\nGame being created"
        },
        "fieldErrors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "*\nError specific to a field if there are any errors."
        }
      },
      "description": "*\nResponse of an game creation."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being updated"
        }
      },
      "title": "*\nUser creation request object"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being created"
        },
        "fieldErrors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "*\nError specific to a field if there are any errors."
        }
      },
      "description": "*\nResponse of an user creation."
    },
    "v1CreateWorldRequest": {
      "type": "object",
      "properties": {
        "world": {
          "$ref": "#/definitions/v1World",
          "title": "*\nWorld being updated"
        }
      },
      "title": "*\nWorld creation request object"
    },
    "v1CreateWorldResponse": {
      "type": "object",
      "properties": {
        "world": {
          "$ref": "#/definitions/v1World",
          "title": "*\nWorld being created"
        },
        "fieldErrors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "*\nError specific to a field if there are any errors."
        }
      },
      "description": "*\nResponse of an world creation."
    },
    "v1DeleteGameResponse": {
      "type": "object",
      "title": "*\nGame deletion response"
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "title": "*\nUser deletion response"
    },
    "v1DeleteWorldResponse": {
      "type": "object",
      "title": "*\nWorld deletion response"
    },
    "v1EndTurnAction": {
      "type": "object",
      "description": "No additional fields needed",
      "title": "*\nEnd current player's turn"
    },
    "v1Game": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Unique ID for the game"
        },
        "creatorId": {
          "type": "string",
          "title": "User who started/created the game"
        },
        "worldId": {
          "type": "string",
          "title": "The world this game was created from"
        },
        "name": {
          "type": "string",
          "title": "Name if items have names"
        },
        "description": {
          "type": "string",
          "title": "Description if game has a description"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Some tags"
        },
        "imageUrl": {
          "type": "string",
          "title": "A possible image url"
        },
        "difficulty": {
          "type": "string",
          "title": "Difficulty - example attribute"
        },
        "config": {
          "$ref": "#/definitions/v1GameConfiguration",
          "title": "Game configuration"
        }
      }
    },
    "v1GameConfiguration": {
      "type": "object",
      "properties": {
        "players": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GamePlayer"
          },
          "title": "Player configuration"
        },
        "settings": {
          "$ref": "#/definitions/v1GameSettings",
          "title": "Game settings"
        }
      }
    },
    "v1GameMove": {
      "type": "object",
      "properties": {
        "player": {
          "type": "integer",
          "format": "int32",
          "title": "The player making the move"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "moveUnit": {
          "$ref": "#/definitions/v1MoveUnitAction"
        },
        "attackUnit": {
          "$ref": "#/definitions/v1AttackUnitAction"
        },
        "endTurn": {
          "$ref": "#/definitions/v1EndTurnAction"
        }
      },
      "title": "*\nRepresents a single move which can be one of many actions in the game"
    },
    "v1GameMoveResult": {
      "type": "object",
      "properties": {
        "isPermanent": {
          "type": "boolean",
          "description": "Whether the result is permenant and can be undone.\nJust moving a unit for example is not permanent, but attacking a unit\nwould be (ie a player cannot undo it)."
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WorldChange"
          },
          "title": "A set of changes to the world as a result of making this move"
        }
      },
      "title": "*\nRepresents the result of executing a move"
    },
    "v1GamePlayer": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int32",
          "title": "Player ID (1-based)"
        },
        "playerType": {
          "type": "string",
          "description": "\"human\", \"ai\", \"open\"",
          "title": "Player type"
        },
        "color": {
          "type": "string",
          "title": "Player color"
        },
        "teamId": {
          "type": "integer",
          "format": "int32",
          "title": "Team ID (0 = no team, 1+ = team number)"
        }
      }
    },
    "v1GameSettings": {
      "type": "object",
      "properties": {
        "allowedUnits": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "List of allowed unit type IDs"
        },
        "turnTimeLimit": {
          "type": "integer",
          "format": "int32",
          "title": "Turn time limit in seconds (0 = no limit)"
        },
        "teamMode": {
          "type": "string",
          "description": "\"ffa\" or \"teams\"",
          "title": "Team mode"
        },
        "maxTurns": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum number of turns (0 = unlimited)"
        }
      }
    },
    "v1GetGameResponse": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/v1Game"
        }
      }
    },
    "v1GetGamesResponse": {
      "type": "object",
      "properties": {
        "games": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Game"
          }
        }
      },
      "title": "*\nGame batch-get response"
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      }
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1User"
          }
        }
      },
      "title": "*\nUser batch-get response"
    },
    "v1GetWorldResponse": {
      "type": "object",
      "properties": {
        "world": {
          "$ref": "#/definitions/v1World"
        }
      }
    },
    "v1GetWorldsResponse": {
      "type": "object",
      "properties": {
        "worlds": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1World"
          }
        }
      },
      "title": "*\nWorld batch-get response"
    },
    "v1ListGamesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Game"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1ListWorldsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1World"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1MoveUnitAction": {
      "type": "object",
      "properties": {
        "fromQ": {
          "type": "integer",
          "format": "int32"
        },
        "fromR": {
          "type": "integer",
          "format": "int32"
        },
        "toQ": {
          "type": "integer",
          "format": "int32"
        },
        "toR": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nMove unit from one position to another"
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "pageKey": {
          "type": "string",
          "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set."
        },
        "pageOffset": {
          "type": "integer",
          "format": "int32",
          "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense."
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "*\nNumber of results to return."
        }
      }
    },
    "v1PaginationResponse": {
      "type": "object",
      "properties": {
        "nextPageKey": {
          "type": "string",
          "description": "*\nThe key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        },
        "nextPageOffset": {
          "type": "integer",
          "format": "int32",
          "title": "*\nAlso support an integer offset if possible"
        },
        "hasMore": {
          "type": "boolean",
          "description": "*\nWhether theere are more results."
        },
        "totalResults": {
          "type": "integer",
          "format": "int32",
          "description": "*\nTotal number of results."
        }
      }
    },
    "v1PlayerChangedChange": {
      "type": "object",
      "properties": {
        "previousPlayer": {
          "type": "integer",
          "format": "int32"
        },
        "newPlayer": {
          "type": "integer",
          "format": "int32"
        },
        "previousTurn": {
          "type": "integer",
          "format": "int32"
        },
        "newTurn": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nActive player changed"
    },
    "v1ProcessMovesResponse": {
      "type": "object",
      "properties": {
        "moveResults": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GameMoveResult"
          },
          "title": "*\nEach game move result stores the result of the individual Move in the request.\nie move_results[i] = ResultOfProcessing(ProcessMoveRequest.moves[i])"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WorldChange"
          },
          "description": "It is not clear if this is needed.  For example concatenating all changes from all the move_results *may* suffice\nas long as the MoveProcessor is making sure that updates are atomic and snapshots the world state before \nstarting a snapshot (and not just a move)",
          "title": "*\nList of changes that resulted from the moves on the game state as a whole\nFor example 10 moves could have resulted in 2 unit creations and 4 city changes"
        }
      },
      "description": "*\nResponse after adding moves to game.\n\nReturns the response of the moves along with all the changes incurred as a result"
    },
    "v1Tile": {
      "type": "object",
      "properties": {
        "q": {
          "type": "integer",
          "format": "int32",
          "title": "Q and R in Cubed coordinates"
        },
        "r": {
          "type": "integer",
          "format": "int32"
        },
        "tileType": {
          "type": "integer",
          "format": "int32",
          "title": "Tile type"
        },
        "player": {
          "type": "integer",
          "format": "int32",
          "title": "Whether the tile itself belongs to a player"
        }
      }
    },
    "v1Unit": {
      "type": "object",
      "properties": {
        "q": {
          "type": "integer",
          "format": "int32",
          "title": "Q and R in Cubed coordinates"
        },
        "r": {
          "type": "integer",
          "format": "int32"
        },
        "player": {
          "type": "integer",
          "format": "int32"
        },
        "unitType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1UnitDamagedChange": {
      "type": "object",
      "properties": {
        "previousHealth": {
          "type": "integer",
          "format": "int32"
        },
        "newHealth": {
          "type": "integer",
          "format": "int32"
        },
        "q": {
          "type": "integer",
          "format": "int32"
        },
        "r": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nA unit took damage"
    },
    "v1UnitKilledChange": {
      "type": "object",
      "properties": {
        "player": {
          "type": "integer",
          "format": "int32"
        },
        "unitType": {
          "type": "integer",
          "format": "int32"
        },
        "q": {
          "type": "integer",
          "format": "int32"
        },
        "r": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nA unit was killed"
    },
    "v1UnitMovedChange": {
      "type": "object",
      "properties": {
        "fromQ": {
          "type": "integer",
          "format": "int32"
        },
        "fromR": {
          "type": "integer",
          "format": "int32"
        },
        "toQ": {
          "type": "integer",
          "format": "int32"
        },
        "toR": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "*\nA unit moved from one position to another"
    },
    "v1UpdateGameResponse": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/v1Game",
          "title": "*\nGame being updated"
        }
      },
      "description": "*\nThe request for (partially) updating an Game.",
      "title": "UpdateGameResponse"
    },
    "v1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being updated"
        }
      },
      "description": "*\nThe request for (partially) updating an User.",
      "title": "UpdateUserResponse"
    },
    "v1UpdateWorldResponse": {
      "type": "object",
      "properties": {
        "world": {
          "$ref": "#/definitions/v1World",
          "title": "*\nWorld being updated"
        }
      },
      "description": "*\nThe request for (partially) updating an World.",
      "title": "UpdateWorldResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Unique ID for the user"
        },
        "name": {
          "type": "string",
          "title": "Name if items have names"
        },
        "description": {
          "type": "string",
          "title": "Description if user has a description"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Some tags"
        },
        "imageUrl": {
          "type": "string",
          "title": "A possible image url"
        },
        "difficulty": {
          "type": "string",
          "title": "Difficulty - example attribute"
        }
      }
    },
    "v1World": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Unique ID for the world"
        },
        "creatorId": {
          "type": "string",
          "title": "User that created the world"
        },
        "name": {
          "type": "string",
          "title": "Name if items have names"
        },
        "description": {
          "type": "string",
          "title": "Description if world has a description"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Some tags"
        },
        "imageUrl": {
          "type": "string",
          "title": "A possible image url"
        },
        "difficulty": {
          "type": "string",
          "title": "Difficulty - example attribute"
        },
        "tiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Tile"
          },
          "title": "JSON-fied tile data about what units and terrains are at each location"
        },
        "units": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Unit"
          },
          "title": "All units on the world and who they belong to"
        }
      }
    },
    "v1WorldChange": {
      "type": "object",
      "properties": {
        "unitMoved": {
          "$ref": "#/definitions/v1UnitMovedChange"
        },
        "unitDamaged": {
          "$ref": "#/definitions/v1UnitDamagedChange"
        },
        "unitKilled": {
          "$ref": "#/definitions/v1UnitKilledChange"
        },
        "playerChanged": {
          "$ref": "#/definitions/v1PlayerChangedChange"
        }
      },
      "title": "*\nRepresents a change to the game world"
    }
  }
}
