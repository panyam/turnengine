syntax = "proto3";

package weewar.v1;

import "google/protobuf/field_mask.proto";
import "weewar/v1/models.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1";

// GameInstancesService manages the gameinstance examples catalog
service GameInstancesService {
  /**
   * Create a new gameinstance
   */
  rpc CreateGameInstance(CreateGameInstanceRequest) returns (CreateGameInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/gameinstances",
      body: "*",
    };
  }

  /**
   * Batch get multiple gameinstances by ID
   */
  rpc GetGameInstances(GetGameInstancesRequest) returns (GetGameInstancesResponse) { 
    option (google.api.http) = {
      get: "/v1/gameinstances:batchGet"
    };
  }

  // ListGameInstances returns all available gameinstances
  rpc ListGameInstances(ListGameInstancesRequest) returns (ListGameInstancesResponse) {
    option (google.api.http) = {
      get: "/v1/gameinstances"
    };
  }

  // GetGameInstance returns a specific gameinstance with metadata
  rpc GetGameInstance(GetGameInstanceRequest) returns (GetGameInstanceResponse) {
    option (google.api.http) = {
      get: "/v1/gameinstances/{id}"
    };
  }

  /**
   * Delete a particular gameinstance
   */
  rpc DeleteGameInstance(DeleteGameInstanceRequest) returns (DeleteGameInstanceResponse) { 
    option (google.api.http) = {
      delete: "/v1/gameinstances/{id=*}"
    };
  }


  // GetGameInstance returns a specific gameinstance with metadata
  rpc UpdateGameInstance(UpdateGameInstanceRequest) returns (UpdateGameInstanceResponse) {
    option (google.api.http) = {
      patch: "/v1/gameinstances/{gameinstance.id=*}"
      body: "*"
    };
  }
}

// GameInstanceInfo represents a gameinstance in the catalog
message GameInstanceInfo {
  string id = 1;
  string name = 2;
  string description = 3;
  string category = 4;
  string difficulty = 5;
  repeated string tags = 6;
  string icon = 7;
  string last_updated = 8;
}

// Request messages
message ListGameInstancesRequest {
  // Pagination info
  Pagination pagination = 1;

  // May be filter by owner id
  string owner_id = 2;
}

message ListGameInstancesResponse {
  repeated GameInstance items = 1;

  PaginationResponse pagination = 2;
}

message GetGameInstanceRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetGameInstanceResponse {
  GameInstance gameinstance = 1;
}

message GetGameInstanceContentRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetGameInstanceContentResponse {
  string weewar_content = 1;
  string recipe_content = 2;
  string readme_content = 3;
}

message UpdateGameInstanceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateGameInstanceRequest"
    }
  };

  /**
   * GameInstance being updated
   */
  GameInstance gameinstance = 1;

  /**
   * Mask of fields being updated in this GameInstance to make partial changes.
   */
  google.protobuf.FieldMask update_mask = 2;
}

/**
 * The request for (partially) updating an GameInstance.
 */
message UpdateGameInstanceResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateGameInstanceResponse"
    }
  };

  /**
   * GameInstance being updated
   */
  GameInstance gameinstance = 1;
}

/**
 * Request to delete an gameinstance.
 */
message DeleteGameInstanceRequest {
  /**
   * ID of the gameinstance to be deleted.
   */
  string id = 1;
}

/**
 * GameInstance deletion response
 */
message DeleteGameInstanceResponse {
}

/**
 * Request to batch get gameinstances
 */
message GetGameInstancesRequest {
  /**
   * IDs of the gameinstance to be fetched
   */
  repeated string ids = 1;
}

/**
 * GameInstance batch-get response
 */
message GetGameInstancesResponse {
  map<string, GameInstance> gameinstances = 1;
}

/**
 * GameInstance creation request object
 */
message CreateGameInstanceRequest {
  /**
   * GameInstance being updated
   */
  GameInstance gameinstance = 1;
}

/**
 * Response of an gameinstance creation.
 */
message CreateGameInstanceResponse {
  /**
   * GameInstance being created
   */
  GameInstance gameinstance = 1;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 2;
}
