// protos/apptemplate/v1/models.proto

syntax = "proto3";
import "google/protobuf/timestamp.proto";
option go_package = "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1";
package weewar.v1;

message User {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // Unique ID for the user
  string id = 3;

  // Name if items have names
  string name = 4;

  // Description if user has a description
  string description = 5;

  // Some tags
  repeated string tags = 6;

  // A possible image url
  string image_url = 7;

  // Difficulty - example attribute
  string difficulty = 8;
}

message Pagination {
  /**
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   */
  string page_key = 1;

  /**
   * If a pagekey is not supported we can also support a direct integer offset
   * for cases where it makes sense.
   */
  int32 page_offset = 2;

  /**
   * Number of results to return.
   */
  int32 page_size = 3;
}

message PaginationResponse {
  /**
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   */
  string next_page_key = 2;

  /**
   * Also support an integer offset if possible
   */
  int32 next_page_offset = 3;

  /**
   * Whether theere are more results.
   */
  bool has_more = 4;

  /**
   * Total number of results.
   */
  int32 total_results = 5;
}

///////// World related models

message World {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // Unique ID for the world
  string id = 3;

  // User that created the world
  string creator_id = 4;

  // Name if items have names
  string name = 5;

  // Description if world has a description
  string description = 6;

  // Some tags
  repeated string tags = 7;

  // A possible image url
  string image_url = 8;

  // Difficulty - example attribute
  string difficulty = 9;

  // The actual world contents/data
  WorldData world_data = 10;
}

message WorldData {
  // JSON-fied tile data about what units and terrains are at each location
  repeated Tile tiles = 1;

  // All units on the world and who they belong to
  repeated Unit units = 2;
}

message Tile {
  // Q and R in Cubed coordinates
  int32 q = 1;
  int32 r = 2;
  int32 tile_type = 3; // Tile type

  // Whether the tile itself belongs to a player
  int32 player = 4;
}

message Unit {
  // Q and R in Cubed coordinates
  int32 q = 1;
  int32 r = 2;
  int32 player = 3;
  int32 unit_type = 4;
  
  // Runtime state fields
  int32 available_health = 5; // Current health points
  int32 distance_left = 6;    // Movement points remaining this turn
  int32 turn_counter = 7;     // Which turn this unit was created/last acted
}

///////// Rules Engine Definitions

// Rules engine terrain definition
message TerrainDefinition {
  int32 id = 1;                  // Terrain type ID
  string name = 2;               // Display name (e.g., "Grass", "Mountain")  
  double base_move_cost = 3;     // Base movement cost
  double defense_bonus = 4;      // Defense bonus multiplier (0.0 to 1.0)
  int32 type = 5;               // Terrain category type
  string description = 6;        // Human-readable description
}

// Rules engine unit definition  
message UnitDefinition {
  int32 id = 1;                  // Unit type ID
  string name = 2;               // Display name (e.g., "Infantry", "Tank")
  int32 movement_points = 3;     // Maximum movement per turn
  int32 attack_range = 4;        // Attack range in tiles
  int32 health = 5;             // Maximum health points
  repeated string properties = 6; // Special properties/abilities
}

// Movement cost matrix for unit types on terrain types
message MovementMatrix {
  // Map of unit_id -> (terrain_id -> movement_cost)
  map<int32, TerrainCostMap> costs = 1;
}

message TerrainCostMap {
  // Map of terrain_id -> movement_cost  
  map<int32, double> terrain_costs = 1;
}

///////// Game related models

// Describes a game and its metadata
message Game {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // Unique ID for the game
  string id = 3;

  // User who started/created the game
  string creator_id = 4;

  // The world this game was created from
  string world_id = 5;

  // Name if items have names
  string name = 6;

  // Description if game has a description
  string description = 7;

  // Some tags
  repeated string tags = 8;

  // A possible image url
  string image_url = 9;

  // Difficulty - example attribute
  string difficulty = 10;

  // Game configuration
  GameConfiguration config = 11;
}

message GameConfiguration {
  // Player configuration
  repeated GamePlayer players = 1;

  // Game settings
  GameSettings settings = 2;
}

message GamePlayer {
  // Player ID (1-based)
  int32 player_id = 1;

  // Player type
  string player_type = 2; // "human", "ai", "open"

  // Player color
  string color = 3;

  // Team ID (0 = no team, 1+ = team number)
  int32 team_id = 4;
}

message GameSettings {
  // List of allowed unit type IDs
  repeated int32 allowed_units = 1;

  // Turn time limit in seconds (0 = no limit)
  int32 turn_time_limit = 2;

  // Team mode
  string team_mode = 3; // "ffa" or "teams"

  // Maximum number of turns (0 = unlimited)
  int32 max_turns = 4;
}

// Holds the game's Active/Current state (eg world state)
message GameState {
  google.protobuf.Timestamp updated_at = 2;

  // ID of the game whos state is being tracked
  string game_id = 3;

  int32 turn_counter = 4;

  int32 current_player = 5;

  // Current world state
  WorldData world_data = 6;
}

// Holds the game's move history (can be used as a replay log)
message GameMoveHistory {
  // Move history for the game
  string game_id = 1;

  // Each entry in our history is a "group" of moves
  repeated GameMoveGroup groups = 2;
}

// A move group - we can allow X moves in one "tick"
message GameMoveGroup {
  // When the moves happened (or were submitted)
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp ended_at = 3;

  /**
   * List of moves to add - 
   */
  repeated GameMove moves = 4;

  /*
   * Each game move result stores the result of the individual Move in the request.
   * ie move_results[i] = ResultOfProcessing(ProcessMoveRequest.moves[i])
   */
  repeated GameMoveResult move_results = 5;
}

/**
 * Represents a single move which can be one of many actions in the game
 */
message GameMove {
	int32 player = 1; // The player making the move
  google.protobuf.Timestamp timestamp = 2;

  // A monotonically increasing and unique (within the game) sequence number for the move
  // This is generated by the server
  int64 sequence_num = 3;

  oneof move_type {
    MoveUnitAction move_unit = 4;
    AttackUnitAction attack_unit = 5;
    EndTurnAction end_turn = 6;
  }
}

/**
 * Represents the result of executing a move
 */
message GameMoveResult {
  // Whether the result is permenant and can be undone.
  // Just moving a unit for example is not permanent, but attacking a unit
  // would be (ie a player cannot undo it).
  bool is_permanent = 1;

  // A monotonically increasing and unique (within the game) sequence number for the move
  int64 sequence_num = 2;

  // A set of changes to the world as a result of making this move
  repeated WorldChange changes = 3;
}

/**
 * Move unit from one position to another
 */
message MoveUnitAction {
  int32 from_q = 1;
  int32 from_r = 2;
  int32 to_q = 3;
  int32 to_r = 4;
}

/**
 * Attack with one unit against another
 */
message AttackUnitAction {
  int32 attacker_q = 1;
  int32 attacker_r = 2;
  int32 defender_q = 3;
  int32 defender_r = 4;
}

/**
 * End current player's turn
 */
message EndTurnAction {
  // No additional fields needed
}

/**
 * Represents a change to the game world
 */
message WorldChange {
  // When did this change happen
  oneof change_type {
    UnitMovedChange unit_moved = 1;
    UnitDamagedChange unit_damaged = 2;
    UnitKilledChange unit_killed = 3;
    PlayerChangedChange player_changed = 4;
  }
}

/**
 * A unit moved from one position to another
 */
message UnitMovedChange {
  int32 from_q = 2;
  int32 from_r = 3;
  int32 to_q = 4;
  int32 to_r = 5;
}

/**
 * A unit took damage
 */
message UnitDamagedChange {
  int32 previous_health = 2;
  int32 new_health = 3;
  int32 q = 4;
  int32 r = 5;
}

/**
 * A unit was killed
 */
message UnitKilledChange {
  int32 player = 2;
  int32 unit_type = 3;
  int32 q = 4;
  int32 r = 5;
}

/**
 * Active player changed
 */
message PlayerChangedChange {
  int32 previous_player = 1;
  int32 new_player = 2;
  int32 previous_turn = 3;
  int32 new_turn = 4;
}
