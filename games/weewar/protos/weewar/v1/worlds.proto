syntax = "proto3";

package weewar.v1;

import "google/protobuf/field_mask.proto";
import "weewar/v1/models.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1";

// WorldsService manages the world examples catalog
service WorldsService {
  /**
   * Create a new world
   */
  rpc CreateWorld(CreateWorldRequest) returns (CreateWorldResponse) {
    option (google.api.http) = {
      post: "/v1/worlds",
      body: "*",
    };
  }

  /**
   * Batch get multiple worlds by ID
   */
  rpc GetWorlds(GetWorldsRequest) returns (GetWorldsResponse) { 
    option (google.api.http) = {
      get: "/v1/worlds:batchGet"
    };
  }

  // ListWorlds returns all available worlds
  rpc ListWorlds(ListWorldsRequest) returns (ListWorldsResponse) {
    option (google.api.http) = {
      get: "/v1/worlds"
    };
  }

  // GetWorld returns a specific world with metadata
  rpc GetWorld(GetWorldRequest) returns (GetWorldResponse) {
    option (google.api.http) = {
      get: "/v1/worlds/{id}"
    };
  }

  /**
   * Delete a particular world
   */
  rpc DeleteWorld(DeleteWorldRequest) returns (DeleteWorldResponse) { 
    option (google.api.http) = {
      delete: "/v1/worlds/{id=*}"
    };
  }


  // GetWorld returns a specific world with metadata
  rpc UpdateWorld(UpdateWorldRequest) returns (UpdateWorldResponse) {
    option (google.api.http) = {
      patch: "/v1/worlds/{world.id=*}"
      body: "*"
    };
  }
}

// WorldInfo represents a world in the catalog
message WorldInfo {
  string id = 1;
  string name = 2;
  string description = 3;
  string category = 4;
  string difficulty = 5;
  repeated string tags = 6;
  string icon = 7;
  string last_updated = 8;
}

// Request messages
message ListWorldsRequest {
  // Pagination info
  Pagination pagination = 1;

  // May be filter by owner id
  string owner_id = 2;
}

message ListWorldsResponse {
  repeated World items = 1;

  PaginationResponse pagination = 2;
}

message GetWorldRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetWorldResponse {
  World world = 1;
}

message GetWorldContentRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetWorldContentResponse {
  string weewar_content = 1;
  string recipe_content = 2;
  string readme_content = 3;
}

message UpdateWorldRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateWorldRequest"
    }
  };

  /**
   * World being updated
   */
  World world = 1;

  /**
   * Mask of fields being updated in this World to make partial changes.
   */
  google.protobuf.FieldMask update_mask = 2;
}

/**
 * The request for (partially) updating an World.
 */
message UpdateWorldResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateWorldResponse"
    }
  };

  /**
   * World being updated
   */
  World world = 1;
}

/**
 * Request to delete an world.
 */
message DeleteWorldRequest {
  /**
   * ID of the world to be deleted.
   */
  string id = 1;
}

/**
 * World deletion response
 */
message DeleteWorldResponse {
}

/**
 * Request to batch get worlds
 */
message GetWorldsRequest {
  /**
   * IDs of the world to be fetched
   */
  repeated string ids = 1;
}

/**
 * World batch-get response
 */
message GetWorldsResponse {
  map<string, World> worlds = 1;
}

/**
 * World creation request object
 */
message CreateWorldRequest {
  /**
   * World being updated
   */
  World world = 1;
}

/**
 * Response of an world creation.
 */
message CreateWorldResponse {
  /**
   * World being created
   */
  World world = 1;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 2;
}
