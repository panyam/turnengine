syntax = "proto3";

package weewar.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "weewar/v1/models.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/panyam/turnengine/games/weewar/gen/go/weewar/v1";

// GamesService manages the game examples catalog
service GamesService {
  /**
   * Create a new game
   */
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse) {
    option (google.api.http) = {
      post: "/v1/games",
      body: "*",
    };
  }

  /**
   * Batch get multiple games by ID
   */
  rpc GetGames(GetGamesRequest) returns (GetGamesResponse) { 
    option (google.api.http) = {
      get: "/v1/games:batchGet"
    };
  }

  // ListGames returns all available games
  rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {
    option (google.api.http) = {
      get: "/v1/games"
    };
  }

  // GetGame returns a specific game with metadata
  rpc GetGame(GetGameRequest) returns (GetGameResponse) {
    option (google.api.http) = {
      get: "/v1/games/{id}"
    };
  }

  /**
   * Delete a particular game
   */
  rpc DeleteGame(DeleteGameRequest) returns (DeleteGameResponse) { 
    option (google.api.http) = {
      delete: "/v1/games/{id=*}"
    };
  }


  // GetGame returns a specific game with metadata
  rpc UpdateGame(UpdateGameRequest) returns (UpdateGameResponse) {
    option (google.api.http) = {
      patch: "/v1/games/{game_id=*}"
      body: "*"
    };
  }

  // Gets the latest game state
  rpc GetGameState(GetGameStateRequest) returns (GetGameStateResponse) {
    option (google.api.http) = {
      get: "/v1/games/{game_id}/state",
    };
  }

  // List the moves for a game
  rpc ListMoves(ListMovesRequest) returns (ListMovesResponse) {
    option (google.api.http) = {
      get: "/v1/games/{game_id}/moves",
    };
  }

  rpc ProcessMoves(ProcessMovesRequest) returns (ProcessMovesResponse) {
    option (google.api.http) = {
      post: "/v1/games/{game_id}/moves",
      body: "*",
    };
  }

  rpc GetOptionsAt(GetOptionsAtRequest) returns (GetOptionsAtResponse) {
    option (google.api.http) = {
      get: "/v1/games/{game_id}/options/{q}/{r}"
    };
  }
}

// GameInfo represents a game in the catalog
message GameInfo {
  string id = 1;
  string name = 2;
  string description = 3;
  string category = 4;
  string difficulty = 5;
  repeated string tags = 6;
  string icon = 7;
  string last_updated = 8;
}

// Request messages
message ListGamesRequest {
  // Pagination info
  Pagination pagination = 1;

  // May be filter by owner id
  string owner_id = 2;
}

message ListGamesResponse {
  repeated Game items = 1;

  PaginationResponse pagination = 2;
}

message GetGameRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetGameResponse {
  Game game = 1;
  GameState state = 2;
  GameMoveHistory history = 3;
}

message GetGameContentRequest {
  string id = 1;
  string version = 2; // Optional, defaults to default_version
}

message GetGameContentResponse {
  string weewar_content = 1;
  string recipe_content = 2;
  string readme_content = 3;
}

message UpdateGameRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateGameRequest"
    }
  };

  // Game id to modify
  string game_id = 1;

  /**
   * Game being updated
   */
  Game new_game = 2;

  // New world state to save
  GameState new_state = 3;

  // History to save
  GameMoveHistory new_history = 4;

  /**
   * Mask of fields being updated in this Game to make partial changes.
   */
  google.protobuf.FieldMask update_mask = 5;
}

/**
 * The request for (partially) updating an Game.
 */
message UpdateGameResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateGameResponse"
    }
  };

  /**
   * Game being updated
   */
  Game game = 1;
}

/**
 * Request to delete an game.
 */
message DeleteGameRequest {
  /**
   * ID of the game to be deleted.
   */
  string id = 1;
}

/**
 * Game deletion response
 */
message DeleteGameResponse {
}

/**
 * Request to batch get games
 */
message GetGamesRequest {
  /**
   * IDs of the game to be fetched
   */
  repeated string ids = 1;
}

/**
 * Game batch-get response
 */
message GetGamesResponse {
  map<string, Game> games = 1;
}

/**
 * Game creation request object
 */
message CreateGameRequest {
  /**
   * Game being updated
   */
  Game game = 1;
}

/**
 * Response of an game creation.
 */
message CreateGameResponse {
  /**
   * Game being created
   */
  Game game = 1;

  // The starting game state
  GameState game_state = 2;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 3;
}

/**
 * Request to add moves to a game
 * The model is that a game in each "tick" can handle multiple moves (by possibly various players).
 * It is upto the move manager/processor in the game to ensure the "transaction" of moves is handled
 * atomically.
 *
 * For example we may have 3 moves where first two units are moved to a common location
 * and then they attack another unit.  Here If we treat it as a single unit attacking it
 * will have different outcomes than a "combined" attack.
 */
message ProcessMovesRequest {
  /**
   * Game ID to add moves to
   */
  string game_id = 1;

  /**
   * List of moves to add
   */
  repeated GameMove moves = 3;
}

/**
 * Response after adding moves to game.
 */
message ProcessMovesResponse {
  // Returns the response of the moves along with all the changes incurred as a result
  /**
   * Each game move result stores the result of the individual Move in the request.
   * ie move_results[i] = ResultOfProcessing(ProcessMoveRequest.moves[i])
   */
  repeated GameMoveResult move_results = 1;

  /**
   * List of changes that resulted from the moves on the game state as a whole
   * For example 10 moves could have resulted in 2 unit creations and 4 city changes
   *
   * It is not clear if this is needed.  For example concatenating all changes from all the move_results *may* suffice
   * as long as the MoveProcessor is making sure that updates are atomic and snapshots the world state before 
   * starting a snapshot (and not just a move)
   */
  repeated WorldChange changes = 2;
}

/**
 * Request to get the game's latest state
 */
message GetGameStateRequest {
  /**
   * Game ID to add moves to
   */
  string game_id = 1;
}

/**
 * Response holding latest game state
 */
message GetGameStateResponse {
  GameState state = 1;
}

/**
 * Request to list moves for a game
 */
message ListMovesRequest {
  /**
   * Game ID to add moves to
   */
  string game_id = 1;

  // Offset of the move to begin fetching from in reverse order from "latest".
  // 0 => start from now
  int32 offset = 2;

  /**
   * Limit to last N moves (from offset).  if <= 0 return all moves
   */
  int32 last_n = 3;
}

/**
 * Response after adding moves to game.
 */
message ListMovesResponse {
  // Whether there are more moves before this
  bool has_more = 1;

  repeated GameMoveGroup move_groups = 2;
}

// =============================================================================
// UI Interaction Methods - Request/Response messages
// =============================================================================

/**
 * Request to get all available options at a position
 */
message GetOptionsAtRequest {
  string game_id = 1;
  int32 q = 2;
  int32 r = 3;
}

/**
 * Response with all available options at a position
 */
message GetOptionsAtResponse {
  repeated GameOption options = 1;
  int32 current_player = 2; // debug: current player in game
  bool game_initialized = 3; // debug: whether game is properly initialized
}

/**
 * A single game option available at a position
 */
message GameOption {
  oneof option_type {
    MoveOption move = 1;
    AttackOption attack = 2;
    EndTurnOption end_turn = 3;
    BuildUnitOption build = 4;
    CaptureBuildingOption  capture = 5;
  }
}

/**
 * Option to end the current turn
 */
message EndTurnOption {
  // Empty - just indicates end turn is available
}

/**
 * Option to move to a specific coordinate
 */
message MoveOption {
  int32 q = 1;
  int32 r = 2;
  int32 movement_cost = 3;
}

/**
 * A possible attack target
 */
message AttackOption {
  int32 q = 1;
  int32 r = 2;
  // Target unit type and health
  int32 target_unit_type = 3;
  int32 target_unit_health = 4;
  bool can_attack = 5;
  int32 damage_estimate = 6; // Estimated damage this attack would deal
}

/**
 * An option to build a unit (at a city tile)
 */
message BuildUnitOption {
  int32 q = 1;
  int32 r = 2;
  int32 tile_type = 3;
  int32 build_cost = 4;
}

/**
 * A move where a unit can capture a building
 */
message CaptureBuildingOption {
  int32 q = 1;
  int32 r = 2;
  int32 tile_type = 3;
}
